"use strict";(globalThis.webpackChunkmonday_ui_react_core=globalThis.webpackChunkmonday_ui_react_core||[]).push([[7601],{"./src/components/Dialog/__stories__/Dialog.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ControlledDialog:()=>ControlledDialog,DialogWithTooltip:()=>DialogWithTooltip,DisableScrollWhenDialogOpen:()=>DisableScrollWhenDialogOpen,HideTriggers:()=>HideTriggers,Overview:()=>Overview,Positions:()=>Positions,ShowTriggers:()=>ShowTriggers,__namedExportsOrder:()=>__namedExportsOrder,default:()=>_stories_Dialog_stories});__webpack_require__("../../node_modules/react/index.js");var createStoryMetaSettingsDecorator=__webpack_require__("./src/storybook/functions/createStoryMetaSettingsDecorator.ts"),Dialog=__webpack_require__("./src/components/Dialog/Dialog.tsx"),DialogContentContainer=__webpack_require__("./src/components/DialogContentContainer/DialogContentContainer.tsx"),IconButton=__webpack_require__("./src/components/IconButton/IconButton.tsx"),Flex=__webpack_require__("./src/components/Flex/Flex.tsx"),Button=__webpack_require__("./src/components/Button/Button.tsx"),helpers=__webpack_require__("./src/components/Dialog/__stories__/helpers.tsx"),Info=__webpack_require__("./src/components/Icon/Icons/components/Info.tsx"),interactions_helper=__webpack_require__("./src/__tests__/interactions-helper.ts"),dist=__webpack_require__("../../node_modules/@storybook/jest/dist/index.mjs");var interactions_utils=__webpack_require__("./src/tests/interactions-utils.ts"),testing_library_dist=__webpack_require__("../../node_modules/@storybook/testing-library/dist/index.mjs");const isDialogHiddenAfterClickOutside=createTestIfDialogHiddenAfterTrigger("click-outside-dialog",(()=>testing_library_dist.Q4.click(getDialogContainer()))),isDialogHiddenAfterContextMenu=createTestIfDialogHiddenAfterTrigger("context-menu-dialog",(()=>testing_library_dist.rC.contextMenu(getDialogContainer()))),closeTriggersInteractionSuite=(0,interactions_utils.Ld)({tests:[isDialogHiddenAfterClickOutside,isDialogHiddenAfterContextMenu],beforeAll:async canvas=>{const clickOutsideButton=await(0,interactions_utils.h5)(canvas,"click-outside-button");await testing_library_dist.Q4.click(clickOutsideButton),await testing_library_dist.Q4.click(clickOutsideButton),await(0,testing_library_dist.fm)((async()=>{const dialog=await getDialogElement(canvas,"click-outside-dialog");(0,dist.E)(dialog).toBeInTheDocument()}),{timeout:100})},afterEach:async()=>{await(0,interactions_helper.S)()}});function getDialogContainer(){return document.querySelector("[data-testid=hide-triggers-container]")}async function getDialogElement(canvas,dataTestId){return await(0,interactions_utils.h5)(canvas,dataTestId)}function createTestIfDialogHiddenAfterTrigger(dataTestId,triggerCallback){return async function(canvas){const dialog=await getDialogElement(canvas,dataTestId);triggerCallback(canvas,dialog),await async function checkIfDialogHidden(dialogElement){await(0,testing_library_dist.fm)((()=>(0,dist.E)(dialogElement).not.toBeInTheDocument()),{timeout:1e3})}(dialog)}}var useSwitch=__webpack_require__("./src/hooks/useSwitch/index.ts"),dialog=(__webpack_require__("./src/components/Dialog/__stories__/Dialog.stories.scss"),__webpack_require__("./src/constants/dialog.ts")),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");const metaSettings=(0,createStoryMetaSettingsDecorator.B)({component:Dialog.A,enumPropNamesArray:[],iconPropNamesArray:[],actionPropsArray:[]}),showHideArgTypes={options:Object.values(dialog.eW),control:{type:"multi-select"},table:{type:{summary:Object.values(dialog.eW).join(" | ")}}},_stories_Dialog_stories={title:"Popover/Dialog",component:Dialog.A,argTypes:{...metaSettings.argTypes,hideTrigger:showHideArgTypes,showTrigger:showHideArgTypes},decorators:metaSettings.decorators,parameters:{storySource:{source:'import React from "react";\nimport { createStoryMetaSettingsDecorator } from "../../../storybook";\nimport { Button, Dialog, DialogContentContainer, Flex, IconButton } from "../../../components";\nimport { ExampleContent } from "./helpers";\nimport { Info } from "../../Icon/Icons";\nimport { closeTriggersInteractionSuite } from "../__tests__/Dialog.interactions";\nimport {\n  CLICK_OUTSIDE_DIALOG,\n  CLICK_OUTSIDE_DIALOG_BUTTON,\n  CONTEXT_MENU_DIALOG,\n  HIDE_TRIGGERS_CONTAINER\n} from "../__tests__/DialogDataTestIds";\nimport useSwitch from "../../../hooks/useSwitch";\nimport "./Dialog.stories.scss";\nimport { HideShowEvent } from "../../../constants/dialog";\nimport { DialogProps } from "../Dialog";\n\nconst metaSettings = createStoryMetaSettingsDecorator({\n  component: Dialog,\n  enumPropNamesArray: [], // List enum props here\n  iconPropNamesArray: [], // List props that are typed as icons here\n  actionPropsArray: [] // List the component\'s actions here\n});\n\nconst showHideArgTypes = {\n  options: Object.values(HideShowEvent),\n  control: {\n    type: "multi-select"\n  },\n  table: {\n    type: {\n      summary: Object.values(HideShowEvent).join(" | ")\n    }\n  }\n};\n\nexport default {\n  title: "Popover/Dialog",\n  component: Dialog,\n  argTypes: {\n    ...metaSettings.argTypes,\n    hideTrigger: showHideArgTypes,\n    showTrigger: showHideArgTypes\n  },\n  decorators: metaSettings.decorators,\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { useSwitch, ExampleContent }\n      }\n    }\n  }\n};\n\nconst dialogTemplate = ({\n  showTrigger,\n  hideTrigger,\n  shouldShowOnMount = true,\n  position,\n  ...dialogProps\n}: DialogProps) => {\n  // for prevent dialog to move while scrolling\n  const modifiers = [\n    {\n      name: "preventOverflow",\n      options: {\n        mainAxis: false\n      }\n    }\n  ];\n  return (\n    <div className="monday-storybook-dialog--story-padding">\n      <Dialog\n        modifiers={modifiers}\n        shouldShowOnMount={shouldShowOnMount}\n        {...dialogProps}\n        showTrigger={showTrigger || [Dialog.hideShowTriggers.CLICK]}\n        hideTrigger={hideTrigger || [Dialog.hideShowTriggers.CLICK]}\n        position={position || Dialog.positions.RIGHT}\n        content={\n          <DialogContentContainer>\n            <ExampleContent />\n          </DialogContentContainer>\n        }\n      >\n        <IconButton icon={Info} active kind={IconButton.kinds.SECONDARY} />\n      </Dialog>\n    </div>\n  );\n};\n\nexport const Overview = {\n  render: dialogTemplate.bind({}),\n  name: "Overview",\n  parameters: {\n    docs: {\n      liveEdit: { isEnabled: false }\n    }\n  }\n};\n\nexport const Positions = {\n  render:\n    // for prevent dialog to move while scrolling\n    () => {\n      // For maintain active state of each button according to the dialog open state (this hooks is available for your usage)\n      const { isChecked: checkedTop, onChange: onChangeTop } = useSwitch({\n        defaultChecked: false\n      });\n\n      const { isChecked: checkedBottom, onChange: onChangeBottom } = useSwitch({\n        defaultChecked: false\n      });\n\n      const { isChecked: checkedRight, onChange: onChangeRight } = useSwitch({\n        defaultChecked: false\n      });\n\n      const { isChecked: checkedLeft, onChange: onChangeLeft } = useSwitch({\n        defaultChecked: false\n      });\n\n      const modifiers = [\n        {\n          name: "preventOverflow",\n          options: {\n            mainAxis: false\n          }\n        }\n      ];\n\n      return (\n        <Flex className="monday-storybook-dialog--story-padding" gap={Flex.gaps.MEDIUM}>\n          <Dialog\n            modifiers={modifiers}\n            open={checkedTop}\n            position={Dialog.positions.TOP}\n            showTrigger={[]}\n            hideTrigger={[]}\n            content={\n              <DialogContentContainer>\n                <ExampleContent />\n              </DialogContentContainer>\n            }\n          >\n            <Button kind={Button.kinds.SECONDARY} onClick={onChangeTop} active={checkedTop}>\n              Top\n            </Button>\n          </Dialog>\n          <Dialog\n            modifiers={modifiers}\n            position={Dialog.positions.BOTTOM}\n            showTrigger={[]}\n            hideTrigger={[]}\n            open={checkedBottom}\n            content={\n              <DialogContentContainer>\n                <ExampleContent />\n              </DialogContentContainer>\n            }\n          >\n            <Button kind={Button.kinds.SECONDARY} onClick={onChangeBottom} active={checkedBottom}>\n              Bottom\n            </Button>\n          </Dialog>\n          <Dialog\n            modifiers={modifiers}\n            showTrigger={[]}\n            hideTrigger={[]}\n            position={Dialog.positions.RIGHT}\n            open={checkedRight}\n            content={\n              <DialogContentContainer>\n                <ExampleContent />\n              </DialogContentContainer>\n            }\n          >\n            <Button kind={Button.kinds.SECONDARY} onClick={onChangeRight} active={checkedRight}>\n              Right\n            </Button>\n          </Dialog>\n          <Dialog\n            modifiers={modifiers}\n            position={Dialog.positions.LEFT}\n            showTrigger={[]}\n            hideTrigger={[]}\n            open={checkedLeft}\n            content={\n              <DialogContentContainer>\n                <ExampleContent />\n              </DialogContentContainer>\n            }\n          >\n            <Button kind={Button.kinds.SECONDARY} onClick={onChangeLeft} active={checkedLeft}>\n              Left\n            </Button>\n          </Dialog>\n        </Flex>\n      );\n    },\n\n  name: "Positions"\n};\n\nexport const ShowTriggers = {\n  render: () => {\n    const { isChecked: clickButtonActive, onChange: onClickClickButton } = useSwitch({\n      defaultChecked: false\n    });\n\n    const { isChecked: hoverButtonActive, onChange: onHoverButton } = useSwitch({\n      defaultChecked: false\n    });\n\n    const { isChecked: focusButtonActive, onChange: onFocusButton } = useSwitch({\n      defaultChecked: false\n    });\n\n    const modifiers = [\n      {\n        name: "preventOverflow",\n        options: {\n          mainAxis: false\n        }\n      }\n    ];\n\n    return (\n      <Flex className="monday-storybook-dialog--story-padding" gap={Flex.gaps.MEDIUM}>\n        <Dialog\n          modifiers={modifiers}\n          showTrigger={[Dialog.hideShowTriggers.CLICK]}\n          hideTrigger={[Dialog.hideShowTriggers.CLICK]}\n          content={\n            <DialogContentContainer>\n              <ExampleContent />\n            </DialogContentContainer>\n          }\n        >\n          <Button kind={Button.kinds.SECONDARY} active={clickButtonActive} onClick={onClickClickButton}>\n            On click\n          </Button>\n        </Dialog>\n        <Dialog\n          modifiers={modifiers}\n          showTrigger={[Dialog.hideShowTriggers.MOUSE_ENTER]}\n          hideTrigger={[Dialog.hideShowTriggers.MOUSE_LEAVE]}\n          content={\n            <DialogContentContainer>\n              <ExampleContent />\n            </DialogContentContainer>\n          }\n        >\n          <div onMouseEnter={onHoverButton} onMouseLeave={onHoverButton}>\n            <Button kind={Button.kinds.SECONDARY} active={hoverButtonActive}>\n              On mouse enter\n            </Button>\n          </div>\n        </Dialog>\n        <Dialog\n          modifiers={modifiers}\n          showTrigger={[Dialog.hideShowTriggers.FOCUS]}\n          hideTrigger={[Dialog.hideShowTriggers.BLUR]}\n          content={\n            <DialogContentContainer>\n              <ExampleContent />\n            </DialogContentContainer>\n          }\n        >\n          <Button\n            onFocus={onFocusButton}\n            onBlur={onFocusButton}\n            kind={Button.kinds.SECONDARY}\n            active={focusButtonActive}\n          >\n            On focus\n          </Button>\n        </Dialog>\n        <Dialog\n          modifiers={modifiers}\n          shouldShowOnMount\n          showTrigger={[]}\n          hideTrigger={[]}\n          position={Dialog.positions.RIGHT}\n          content={\n            <DialogContentContainer>\n              <ExampleContent />\n            </DialogContentContainer>\n          }\n        >\n          <Button kind={Button.kinds.SECONDARY} active>\n            On mount\n          </Button>\n        </Dialog>\n      </Flex>\n    );\n  },\n\n  name: "Show triggers",\n\n  parameters: {\n    chromatic: {\n      pauseAnimationAtEnd: true\n    }\n  }\n};\n\nexport const HideTriggers = {\n  render: () => {\n    // For maintain active state of each button according to the dialog open state (this hooks is available for your usage)\n    const { isChecked: clickButtonActive, onChange: switchClickButtonActive } = useSwitch({\n      defaultChecked: true\n    });\n\n    const { isChecked: clickOutsideButtonActive, onChange: switchClickOutsideActive } = useSwitch({\n      defaultChecked: true\n    });\n\n    const { isChecked: mouseLeaveButtonActive, onChange: switchMouseLeaveActive } = useSwitch({\n      defaultChecked: true\n    });\n\n    const { isChecked: blurButtonActive, onChange: switchBlurButtonActive } = useSwitch({\n      defaultChecked: true\n    });\n\n    const { isChecked: contentClickButtonActive, onChange: switchContentClickActive } = useSwitch({\n      defaultChecked: true\n    });\n\n    const { isChecked: contextMenuButtonActive, onChange: switchContextMenuActive } = useSwitch({\n      defaultChecked: true\n    });\n\n    // for prevent dialog to move while scrolling\n    const modifiers = [\n      {\n        name: "preventOverflow",\n        options: {\n          mainAxis: false\n        }\n      }\n    ];\n\n    return (\n      <Flex\n        data-testid={HIDE_TRIGGERS_CONTAINER}\n        id={HIDE_TRIGGERS_CONTAINER}\n        className="monday-storybook-dialog_hide-triggers-story"\n        wrap\n        direction={Flex.directions.COLUMN}\n        justify={Flex.justify.START}\n        align={Flex.align.START}\n      >\n        <Dialog\n          modifiers={modifiers}\n          shouldShowOnMount\n          containerSelector={`#${HIDE_TRIGGERS_CONTAINER}`}\n          onClickOutside={switchClickOutsideActive}\n          position={Dialog.positions.RIGHT}\n          showTrigger={[Dialog.hideShowTriggers.CLICK]}\n          hideTrigger={[Dialog.hideShowTriggers.CLICK_OUTSIDE]}\n          content={\n            <DialogContentContainer data-testid={CLICK_OUTSIDE_DIALOG}>\n              <ExampleContent rowsCount={1} />\n            </DialogContentContainer>\n          }\n        >\n          <Button\n            data-testid={CLICK_OUTSIDE_DIALOG_BUTTON}\n            kind={Button.kinds.SECONDARY}\n            active={clickOutsideButtonActive}\n            onClick={switchClickOutsideActive}\n            style={{\n              marginBlock: "54px"\n            }}\n          >\n            On click outside\n          </Button>\n        </Dialog>\n        <Dialog\n          modifiers={modifiers}\n          shouldShowOnMount\n          position={Dialog.positions.RIGHT}\n          showTrigger={[Dialog.hideShowTriggers.CLICK]}\n          hideTrigger={[Dialog.hideShowTriggers.CLICK]}\n          content={\n            <DialogContentContainer>\n              <ExampleContent rowsCount={1} />\n            </DialogContentContainer>\n          }\n        >\n          <Button\n            kind={Button.kinds.SECONDARY}\n            active={clickButtonActive}\n            onClick={switchClickButtonActive}\n            style={{\n              marginBlock: "54px"\n            }}\n          >\n            On click\n          </Button>\n        </Dialog>\n        <Dialog\n          modifiers={modifiers}\n          shouldShowOnMount\n          position={Dialog.positions.RIGHT}\n          showTrigger={[Dialog.hideShowTriggers.FOCUS, Dialog.hideShowTriggers.CLICK]}\n          hideTrigger={[Dialog.hideShowTriggers.BLUR]}\n          content={\n            <DialogContentContainer>\n              <ExampleContent rowsCount={1} />\n            </DialogContentContainer>\n          }\n        >\n          <Button\n            kind={Button.kinds.SECONDARY}\n            active={blurButtonActive}\n            onClick={switchBlurButtonActive}\n            style={{\n              marginBlock: "54px"\n            }}\n          >\n            On blur\n          </Button>\n        </Dialog>\n        <Dialog\n          modifiers={modifiers}\n          shouldShowOnMount\n          position={Dialog.positions.RIGHT}\n          showTrigger={[Dialog.hideShowTriggers.CLICK]}\n          hideTrigger={[Dialog.hideShowTriggers.CONTENT_CLICK]}\n          onContentClick={switchContentClickActive}\n          content={\n            <DialogContentContainer>\n              <ExampleContent rowsCount={1} />\n            </DialogContentContainer>\n          }\n        >\n          <Button\n            kind={Button.kinds.SECONDARY}\n            active={contentClickButtonActive}\n            onClick={switchContentClickActive}\n            style={{\n              marginBlock: "54px"\n            }}\n          >\n            On content click\n          </Button>\n        </Dialog>\n        <Dialog\n          modifiers={modifiers}\n          shouldShowOnMount\n          showTrigger={[Dialog.hideShowTriggers.MOUSE_ENTER]}\n          hideTrigger={[Dialog.hideShowTriggers.MOUSE_LEAVE]}\n          position={Dialog.positions.RIGHT}\n          onDialogDidHide={switchMouseLeaveActive}\n          onDialogDidShow={switchMouseLeaveActive}\n          content={\n            <DialogContentContainer>\n              <ExampleContent rowsCount={1} />\n            </DialogContentContainer>\n          }\n        >\n          <Button\n            kind={Button.kinds.SECONDARY}\n            active={mouseLeaveButtonActive}\n            onClick={switchMouseLeaveActive}\n            style={{\n              marginBlock: "54px"\n            }}\n          >\n            On mouse leave\n          </Button>\n        </Dialog>\n        <Dialog\n          modifiers={modifiers}\n          shouldShowOnMount\n          showTrigger={[Dialog.hideShowTriggers.CLICK]}\n          hideTrigger={[Dialog.hideShowTriggers.CONTEXT_MENU]}\n          position={Dialog.positions.RIGHT}\n          containerSelector={`#${HIDE_TRIGGERS_CONTAINER}`}\n          onDialogDidHide={switchContextMenuActive}\n          onDialogDidShow={switchContextMenuActive}\n          content={\n            <DialogContentContainer data-testid={CONTEXT_MENU_DIALOG}>\n              <ExampleContent rowsCount={1} />\n            </DialogContentContainer>\n          }\n        >\n          <Button\n            kind={Button.kinds.SECONDARY}\n            active={contextMenuButtonActive}\n            style={{\n              marginBlock: "54px"\n            }}\n          >\n            On right click\n          </Button>\n        </Dialog>\n      </Flex>\n    );\n  },\n\n  name: "Hide triggers",\n\n  play: closeTriggersInteractionSuite,\n\n  parameters: {\n    chromatic: {\n      pauseAnimationAtEnd: true\n    },\n    docs: {\n      liveEdit: {\n        scope: {\n          HIDE_TRIGGERS_CONTAINER,\n          CLICK_OUTSIDE_DIALOG,\n          CLICK_OUTSIDE_DIALOG_BUTTON,\n          CONTEXT_MENU_DIALOG\n        }\n      }\n    }\n  }\n};\n\nexport const ControlledDialog = {\n  render: () => {\n    const { isChecked: isOpen, onChange: setIsOpen } = useSwitch({\n      defaultChecked: false\n    });\n\n    return (\n      <Dialog\n        //disable default triggers\n        showTrigger={[]}\n        // manage the opening state in the app level\n        open={isOpen}\n        content={\n          <DialogContentContainer>\n            <DialogContentContainer>\n              <Button\n                kind={Button.kinds.SECONDARY}\n                // @ts-ignore\n                onClick={() => setIsOpen(false)}\n              >\n                This will close as well\n              </Button>\n            </DialogContentContainer>\n          </DialogContentContainer>\n        }\n      >\n        <Button\n          // @ts-ignore\n          onClick={() => setIsOpen(!isOpen)}\n        >\n          Click me to toggle the Dialog\n        </Button>\n      </Dialog>\n    );\n  },\n\n  name: "Controlled Dialog"\n};\n\nexport const DialogWithTooltip = {\n  // for prevent dialog to move while scrolling\n  render: () => {\n    const modifiers = [\n      {\n        name: "preventOverflow",\n        options: {\n          mainAxis: false\n        }\n      }\n    ];\n\n    return (\n      <div className="monday-storybook-dialog--story-padding">\n        <Dialog\n          tooltip\n          modifiers={modifiers}\n          shouldShowOnMount\n          showTrigger={[Dialog.hideShowTriggers.CLICK]}\n          hideTrigger={[Dialog.hideShowTriggers.CLICK]}\n          position={Dialog.positions.RIGHT}\n          content={\n            <DialogContentContainer>\n              <ExampleContent />\n            </DialogContentContainer>\n          }\n        >\n          <IconButton icon={Info} active kind={IconButton.kinds.SECONDARY} />\n        </Dialog>\n      </div>\n    );\n  },\n\n  name: "Dialog with tooltip",\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { Info }\n      }\n    }\n  }\n};\n\nexport const DisableScrollWhenDialogOpen = {\n  render: () => {\n    // For maintain active state of each button according to the dialog open state (this hooks is available for your usage)\n    const { isChecked: checkedTop, onChange: onChangeTop } = useSwitch({\n      defaultChecked: false\n    });\n\n    return (\n      <Flex className="monday-storybook-dialog--story-padding" gap={Flex.gaps.MEDIUM}>\n        <div\n          className={"scrollable"}\n          style={{\n            height: "300px",\n            width: "400px",\n            overflow: "auto"\n          }}\n        >\n          <div\n            style={{\n              height: "800px"\n            }}\n          >\n            <Dialog\n              open={checkedTop}\n              position={Dialog.positions.LEFT}\n              showTrigger={[]}\n              hideTrigger={[]}\n              containerSelector={".scrollable"}\n              disableContainerScroll\n              content={\n                <DialogContentContainer>\n                  <ExampleContent />\n                </DialogContentContainer>\n              }\n            >\n              <Button kind={Button.kinds.SECONDARY} onClick={onChangeTop} active={checkedTop}>\n                Click\n              </Button>\n            </Dialog>\n          </div>\n        </div>\n      </Flex>\n    );\n  },\n\n  name: "Disable scroll when dialog open"\n};\n',locationsMap:{overview:{startLoc:{col:24,line:92},endLoc:{col:1,line:100},startBody:{col:24,line:92},endBody:{col:1,line:100}},positions:{startLoc:{col:25,line:102},endLoc:{col:1,line:203},startBody:{col:25,line:102},endBody:{col:1,line:203}},"show-triggers":{startLoc:{col:28,line:205},endLoc:{col:1,line:306},startBody:{col:28,line:205},endBody:{col:1,line:306}},"hide-triggers":{startLoc:{col:28,line:308},endLoc:{col:1,line:524},startBody:{col:28,line:308},endBody:{col:1,line:524}},"controlled-dialog":{startLoc:{col:32,line:526},endLoc:{col:1,line:563},startBody:{col:32,line:526},endBody:{col:1,line:563}},"dialog-with-tooltip":{startLoc:{col:33,line:565},endLoc:{col:1,line:606},startBody:{col:33,line:565},endBody:{col:1,line:606}},"disable-scroll-when-dialog-open":{startLoc:{col:43,line:608},endLoc:{col:1,line:654},startBody:{col:43,line:608},endBody:{col:1,line:654}}}},docs:{liveEdit:{scope:{useSwitch:useSwitch.A,ExampleContent:helpers.O}}}}},dialogTemplate=_ref=>{let{showTrigger,hideTrigger,shouldShowOnMount=!0,position,...dialogProps}=_ref;return(0,jsx_runtime.jsx)("div",{className:"monday-storybook-dialog--story-padding",children:(0,jsx_runtime.jsx)(Dialog.A,{modifiers:[{name:"preventOverflow",options:{mainAxis:!1}}],shouldShowOnMount,...dialogProps,showTrigger:showTrigger||[Dialog.A.hideShowTriggers.CLICK],hideTrigger:hideTrigger||[Dialog.A.hideShowTriggers.CLICK],position:position||Dialog.A.positions.RIGHT,content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(helpers.O,{})}),children:(0,jsx_runtime.jsx)(IconButton.A,{icon:Info.A,active:!0,kind:IconButton.A.kinds.SECONDARY})})})};dialogTemplate.displayName="dialogTemplate";const Overview={render:dialogTemplate.bind({}),name:"Overview",parameters:{docs:{liveEdit:{isEnabled:!1}}}},Positions={render:()=>{const{isChecked:checkedTop,onChange:onChangeTop}=(0,useSwitch.A)({defaultChecked:!1}),{isChecked:checkedBottom,onChange:onChangeBottom}=(0,useSwitch.A)({defaultChecked:!1}),{isChecked:checkedRight,onChange:onChangeRight}=(0,useSwitch.A)({defaultChecked:!1}),{isChecked:checkedLeft,onChange:onChangeLeft}=(0,useSwitch.A)({defaultChecked:!1}),modifiers=[{name:"preventOverflow",options:{mainAxis:!1}}];return(0,jsx_runtime.jsxs)(Flex.A,{className:"monday-storybook-dialog--story-padding",gap:Flex.A.gaps.MEDIUM,children:[(0,jsx_runtime.jsx)(Dialog.A,{modifiers,open:checkedTop,position:Dialog.A.positions.TOP,showTrigger:[],hideTrigger:[],content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(helpers.O,{})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:Button.A.kinds.SECONDARY,onClick:onChangeTop,active:checkedTop,children:"Top"})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,position:Dialog.A.positions.BOTTOM,showTrigger:[],hideTrigger:[],open:checkedBottom,content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(helpers.O,{})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:Button.A.kinds.SECONDARY,onClick:onChangeBottom,active:checkedBottom,children:"Bottom"})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,showTrigger:[],hideTrigger:[],position:Dialog.A.positions.RIGHT,open:checkedRight,content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(helpers.O,{})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:Button.A.kinds.SECONDARY,onClick:onChangeRight,active:checkedRight,children:"Right"})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,position:Dialog.A.positions.LEFT,showTrigger:[],hideTrigger:[],open:checkedLeft,content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(helpers.O,{})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:Button.A.kinds.SECONDARY,onClick:onChangeLeft,active:checkedLeft,children:"Left"})})]})},name:"Positions"},ShowTriggers={render:()=>{const{isChecked:clickButtonActive,onChange:onClickClickButton}=(0,useSwitch.A)({defaultChecked:!1}),{isChecked:hoverButtonActive,onChange:onHoverButton}=(0,useSwitch.A)({defaultChecked:!1}),{isChecked:focusButtonActive,onChange:onFocusButton}=(0,useSwitch.A)({defaultChecked:!1}),modifiers=[{name:"preventOverflow",options:{mainAxis:!1}}];return(0,jsx_runtime.jsxs)(Flex.A,{className:"monday-storybook-dialog--story-padding",gap:Flex.A.gaps.MEDIUM,children:[(0,jsx_runtime.jsx)(Dialog.A,{modifiers,showTrigger:[Dialog.A.hideShowTriggers.CLICK],hideTrigger:[Dialog.A.hideShowTriggers.CLICK],content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(helpers.O,{})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:Button.A.kinds.SECONDARY,active:clickButtonActive,onClick:onClickClickButton,children:"On click"})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,showTrigger:[Dialog.A.hideShowTriggers.MOUSE_ENTER],hideTrigger:[Dialog.A.hideShowTriggers.MOUSE_LEAVE],content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(helpers.O,{})}),children:(0,jsx_runtime.jsx)("div",{onMouseEnter:onHoverButton,onMouseLeave:onHoverButton,children:(0,jsx_runtime.jsx)(Button.A,{kind:Button.A.kinds.SECONDARY,active:hoverButtonActive,children:"On mouse enter"})})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,showTrigger:[Dialog.A.hideShowTriggers.FOCUS],hideTrigger:[Dialog.A.hideShowTriggers.BLUR],content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(helpers.O,{})}),children:(0,jsx_runtime.jsx)(Button.A,{onFocus:onFocusButton,onBlur:onFocusButton,kind:Button.A.kinds.SECONDARY,active:focusButtonActive,children:"On focus"})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,shouldShowOnMount:!0,showTrigger:[],hideTrigger:[],position:Dialog.A.positions.RIGHT,content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(helpers.O,{})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:Button.A.kinds.SECONDARY,active:!0,children:"On mount"})})]})},name:"Show triggers",parameters:{chromatic:{pauseAnimationAtEnd:!0}}},HideTriggers={render:()=>{const{isChecked:clickButtonActive,onChange:switchClickButtonActive}=(0,useSwitch.A)({defaultChecked:!0}),{isChecked:clickOutsideButtonActive,onChange:switchClickOutsideActive}=(0,useSwitch.A)({defaultChecked:!0}),{isChecked:mouseLeaveButtonActive,onChange:switchMouseLeaveActive}=(0,useSwitch.A)({defaultChecked:!0}),{isChecked:blurButtonActive,onChange:switchBlurButtonActive}=(0,useSwitch.A)({defaultChecked:!0}),{isChecked:contentClickButtonActive,onChange:switchContentClickActive}=(0,useSwitch.A)({defaultChecked:!0}),{isChecked:contextMenuButtonActive,onChange:switchContextMenuActive}=(0,useSwitch.A)({defaultChecked:!0}),modifiers=[{name:"preventOverflow",options:{mainAxis:!1}}];return(0,jsx_runtime.jsxs)(Flex.A,{"data-testid":"hide-triggers-container",id:"hide-triggers-container",className:"monday-storybook-dialog_hide-triggers-story",wrap:!0,direction:Flex.A.directions.COLUMN,justify:Flex.A.justify.START,align:Flex.A.align.START,children:[(0,jsx_runtime.jsx)(Dialog.A,{modifiers,shouldShowOnMount:!0,containerSelector:"#hide-triggers-container",onClickOutside:switchClickOutsideActive,position:Dialog.A.positions.RIGHT,showTrigger:[Dialog.A.hideShowTriggers.CLICK],hideTrigger:[Dialog.A.hideShowTriggers.CLICK_OUTSIDE],content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{"data-testid":"click-outside-dialog",children:(0,jsx_runtime.jsx)(helpers.O,{rowsCount:1})}),children:(0,jsx_runtime.jsx)(Button.A,{"data-testid":"click-outside-button",kind:Button.A.kinds.SECONDARY,active:clickOutsideButtonActive,onClick:switchClickOutsideActive,style:{marginBlock:"54px"},children:"On click outside"})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,shouldShowOnMount:!0,position:Dialog.A.positions.RIGHT,showTrigger:[Dialog.A.hideShowTriggers.CLICK],hideTrigger:[Dialog.A.hideShowTriggers.CLICK],content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(helpers.O,{rowsCount:1})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:Button.A.kinds.SECONDARY,active:clickButtonActive,onClick:switchClickButtonActive,style:{marginBlock:"54px"},children:"On click"})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,shouldShowOnMount:!0,position:Dialog.A.positions.RIGHT,showTrigger:[Dialog.A.hideShowTriggers.FOCUS,Dialog.A.hideShowTriggers.CLICK],hideTrigger:[Dialog.A.hideShowTriggers.BLUR],content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(helpers.O,{rowsCount:1})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:Button.A.kinds.SECONDARY,active:blurButtonActive,onClick:switchBlurButtonActive,style:{marginBlock:"54px"},children:"On blur"})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,shouldShowOnMount:!0,position:Dialog.A.positions.RIGHT,showTrigger:[Dialog.A.hideShowTriggers.CLICK],hideTrigger:[Dialog.A.hideShowTriggers.CONTENT_CLICK],onContentClick:switchContentClickActive,content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(helpers.O,{rowsCount:1})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:Button.A.kinds.SECONDARY,active:contentClickButtonActive,onClick:switchContentClickActive,style:{marginBlock:"54px"},children:"On content click"})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,shouldShowOnMount:!0,showTrigger:[Dialog.A.hideShowTriggers.MOUSE_ENTER],hideTrigger:[Dialog.A.hideShowTriggers.MOUSE_LEAVE],position:Dialog.A.positions.RIGHT,onDialogDidHide:switchMouseLeaveActive,onDialogDidShow:switchMouseLeaveActive,content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(helpers.O,{rowsCount:1})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:Button.A.kinds.SECONDARY,active:mouseLeaveButtonActive,onClick:switchMouseLeaveActive,style:{marginBlock:"54px"},children:"On mouse leave"})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,shouldShowOnMount:!0,showTrigger:[Dialog.A.hideShowTriggers.CLICK],hideTrigger:[Dialog.A.hideShowTriggers.CONTEXT_MENU],position:Dialog.A.positions.RIGHT,containerSelector:"#hide-triggers-container",onDialogDidHide:switchContextMenuActive,onDialogDidShow:switchContextMenuActive,content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{"data-testid":"context-menu-dialog",children:(0,jsx_runtime.jsx)(helpers.O,{rowsCount:1})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:Button.A.kinds.SECONDARY,active:contextMenuButtonActive,style:{marginBlock:"54px"},children:"On right click"})})]})},name:"Hide triggers",play:closeTriggersInteractionSuite,parameters:{chromatic:{pauseAnimationAtEnd:!0},docs:{liveEdit:{scope:{HIDE_TRIGGERS_CONTAINER:"hide-triggers-container",CLICK_OUTSIDE_DIALOG:"click-outside-dialog",CLICK_OUTSIDE_DIALOG_BUTTON:"click-outside-button",CONTEXT_MENU_DIALOG:"context-menu-dialog"}}}}},ControlledDialog={render:()=>{const{isChecked:isOpen,onChange:setIsOpen}=(0,useSwitch.A)({defaultChecked:!1});return(0,jsx_runtime.jsx)(Dialog.A,{showTrigger:[],open:isOpen,content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(Button.A,{kind:Button.A.kinds.SECONDARY,onClick:()=>setIsOpen(!1),children:"This will close as well"})})}),children:(0,jsx_runtime.jsx)(Button.A,{onClick:()=>setIsOpen(!isOpen),children:"Click me to toggle the Dialog"})})},name:"Controlled Dialog"},DialogWithTooltip={render:()=>(0,jsx_runtime.jsx)("div",{className:"monday-storybook-dialog--story-padding",children:(0,jsx_runtime.jsx)(Dialog.A,{tooltip:!0,modifiers:[{name:"preventOverflow",options:{mainAxis:!1}}],shouldShowOnMount:!0,showTrigger:[Dialog.A.hideShowTriggers.CLICK],hideTrigger:[Dialog.A.hideShowTriggers.CLICK],position:Dialog.A.positions.RIGHT,content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(helpers.O,{})}),children:(0,jsx_runtime.jsx)(IconButton.A,{icon:Info.A,active:!0,kind:IconButton.A.kinds.SECONDARY})})}),name:"Dialog with tooltip",parameters:{docs:{liveEdit:{scope:{Info:Info.A}}}}},DisableScrollWhenDialogOpen={render:()=>{const{isChecked:checkedTop,onChange:onChangeTop}=(0,useSwitch.A)({defaultChecked:!1});return(0,jsx_runtime.jsx)(Flex.A,{className:"monday-storybook-dialog--story-padding",gap:Flex.A.gaps.MEDIUM,children:(0,jsx_runtime.jsx)("div",{className:"scrollable",style:{height:"300px",width:"400px",overflow:"auto"},children:(0,jsx_runtime.jsx)("div",{style:{height:"800px"},children:(0,jsx_runtime.jsx)(Dialog.A,{open:checkedTop,position:Dialog.A.positions.LEFT,showTrigger:[],hideTrigger:[],containerSelector:".scrollable",disableContainerScroll:!0,content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(helpers.O,{})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:Button.A.kinds.SECONDARY,onClick:onChangeTop,active:checkedTop,children:"Click"})})})})})},name:"Disable scroll when dialog open"};Overview.parameters={...Overview.parameters,docs:{...Overview.parameters?.docs,source:{originalSource:'{\n  render: dialogTemplate.bind({}),\n  name: "Overview",\n  parameters: {\n    docs: {\n      liveEdit: {\n        isEnabled: false\n      }\n    }\n  }\n}',...Overview.parameters?.docs?.source}}},Positions.parameters={...Positions.parameters,docs:{...Positions.parameters?.docs,source:{originalSource:'{\n  render:\n  // for prevent dialog to move while scrolling\n  () => {\n    // For maintain active state of each button according to the dialog open state (this hooks is available for your usage)\n    const {\n      isChecked: checkedTop,\n      onChange: onChangeTop\n    } = useSwitch({\n      defaultChecked: false\n    });\n    const {\n      isChecked: checkedBottom,\n      onChange: onChangeBottom\n    } = useSwitch({\n      defaultChecked: false\n    });\n    const {\n      isChecked: checkedRight,\n      onChange: onChangeRight\n    } = useSwitch({\n      defaultChecked: false\n    });\n    const {\n      isChecked: checkedLeft,\n      onChange: onChangeLeft\n    } = useSwitch({\n      defaultChecked: false\n    });\n    const modifiers = [{\n      name: "preventOverflow",\n      options: {\n        mainAxis: false\n      }\n    }];\n    return <Flex className="monday-storybook-dialog--story-padding" gap={Flex.gaps.MEDIUM}>\n          <Dialog modifiers={modifiers} open={checkedTop} position={Dialog.positions.TOP} showTrigger={[]} hideTrigger={[]} content={<DialogContentContainer>\n                <ExampleContent />\n              </DialogContentContainer>}>\n            <Button kind={Button.kinds.SECONDARY} onClick={onChangeTop} active={checkedTop}>\n              Top\n            </Button>\n          </Dialog>\n          <Dialog modifiers={modifiers} position={Dialog.positions.BOTTOM} showTrigger={[]} hideTrigger={[]} open={checkedBottom} content={<DialogContentContainer>\n                <ExampleContent />\n              </DialogContentContainer>}>\n            <Button kind={Button.kinds.SECONDARY} onClick={onChangeBottom} active={checkedBottom}>\n              Bottom\n            </Button>\n          </Dialog>\n          <Dialog modifiers={modifiers} showTrigger={[]} hideTrigger={[]} position={Dialog.positions.RIGHT} open={checkedRight} content={<DialogContentContainer>\n                <ExampleContent />\n              </DialogContentContainer>}>\n            <Button kind={Button.kinds.SECONDARY} onClick={onChangeRight} active={checkedRight}>\n              Right\n            </Button>\n          </Dialog>\n          <Dialog modifiers={modifiers} position={Dialog.positions.LEFT} showTrigger={[]} hideTrigger={[]} open={checkedLeft} content={<DialogContentContainer>\n                <ExampleContent />\n              </DialogContentContainer>}>\n            <Button kind={Button.kinds.SECONDARY} onClick={onChangeLeft} active={checkedLeft}>\n              Left\n            </Button>\n          </Dialog>\n        </Flex>;\n  },\n  name: "Positions"\n}',...Positions.parameters?.docs?.source}}},ShowTriggers.parameters={...ShowTriggers.parameters,docs:{...ShowTriggers.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const {\n      isChecked: clickButtonActive,\n      onChange: onClickClickButton\n    } = useSwitch({\n      defaultChecked: false\n    });\n    const {\n      isChecked: hoverButtonActive,\n      onChange: onHoverButton\n    } = useSwitch({\n      defaultChecked: false\n    });\n    const {\n      isChecked: focusButtonActive,\n      onChange: onFocusButton\n    } = useSwitch({\n      defaultChecked: false\n    });\n    const modifiers = [{\n      name: "preventOverflow",\n      options: {\n        mainAxis: false\n      }\n    }];\n    return <Flex className="monday-storybook-dialog--story-padding" gap={Flex.gaps.MEDIUM}>\n        <Dialog modifiers={modifiers} showTrigger={[Dialog.hideShowTriggers.CLICK]} hideTrigger={[Dialog.hideShowTriggers.CLICK]} content={<DialogContentContainer>\n              <ExampleContent />\n            </DialogContentContainer>}>\n          <Button kind={Button.kinds.SECONDARY} active={clickButtonActive} onClick={onClickClickButton}>\n            On click\n          </Button>\n        </Dialog>\n        <Dialog modifiers={modifiers} showTrigger={[Dialog.hideShowTriggers.MOUSE_ENTER]} hideTrigger={[Dialog.hideShowTriggers.MOUSE_LEAVE]} content={<DialogContentContainer>\n              <ExampleContent />\n            </DialogContentContainer>}>\n          <div onMouseEnter={onHoverButton} onMouseLeave={onHoverButton}>\n            <Button kind={Button.kinds.SECONDARY} active={hoverButtonActive}>\n              On mouse enter\n            </Button>\n          </div>\n        </Dialog>\n        <Dialog modifiers={modifiers} showTrigger={[Dialog.hideShowTriggers.FOCUS]} hideTrigger={[Dialog.hideShowTriggers.BLUR]} content={<DialogContentContainer>\n              <ExampleContent />\n            </DialogContentContainer>}>\n          <Button onFocus={onFocusButton} onBlur={onFocusButton} kind={Button.kinds.SECONDARY} active={focusButtonActive}>\n            On focus\n          </Button>\n        </Dialog>\n        <Dialog modifiers={modifiers} shouldShowOnMount showTrigger={[]} hideTrigger={[]} position={Dialog.positions.RIGHT} content={<DialogContentContainer>\n              <ExampleContent />\n            </DialogContentContainer>}>\n          <Button kind={Button.kinds.SECONDARY} active>\n            On mount\n          </Button>\n        </Dialog>\n      </Flex>;\n  },\n  name: "Show triggers",\n  parameters: {\n    chromatic: {\n      pauseAnimationAtEnd: true\n    }\n  }\n}',...ShowTriggers.parameters?.docs?.source}}},HideTriggers.parameters={...HideTriggers.parameters,docs:{...HideTriggers.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    // For maintain active state of each button according to the dialog open state (this hooks is available for your usage)\n    const {\n      isChecked: clickButtonActive,\n      onChange: switchClickButtonActive\n    } = useSwitch({\n      defaultChecked: true\n    });\n    const {\n      isChecked: clickOutsideButtonActive,\n      onChange: switchClickOutsideActive\n    } = useSwitch({\n      defaultChecked: true\n    });\n    const {\n      isChecked: mouseLeaveButtonActive,\n      onChange: switchMouseLeaveActive\n    } = useSwitch({\n      defaultChecked: true\n    });\n    const {\n      isChecked: blurButtonActive,\n      onChange: switchBlurButtonActive\n    } = useSwitch({\n      defaultChecked: true\n    });\n    const {\n      isChecked: contentClickButtonActive,\n      onChange: switchContentClickActive\n    } = useSwitch({\n      defaultChecked: true\n    });\n    const {\n      isChecked: contextMenuButtonActive,\n      onChange: switchContextMenuActive\n    } = useSwitch({\n      defaultChecked: true\n    });\n\n    // for prevent dialog to move while scrolling\n    const modifiers = [{\n      name: "preventOverflow",\n      options: {\n        mainAxis: false\n      }\n    }];\n    return <Flex data-testid={HIDE_TRIGGERS_CONTAINER} id={HIDE_TRIGGERS_CONTAINER} className="monday-storybook-dialog_hide-triggers-story" wrap direction={Flex.directions.COLUMN} justify={Flex.justify.START} align={Flex.align.START}>\n        <Dialog modifiers={modifiers} shouldShowOnMount containerSelector={`#${HIDE_TRIGGERS_CONTAINER}`} onClickOutside={switchClickOutsideActive} position={Dialog.positions.RIGHT} showTrigger={[Dialog.hideShowTriggers.CLICK]} hideTrigger={[Dialog.hideShowTriggers.CLICK_OUTSIDE]} content={<DialogContentContainer data-testid={CLICK_OUTSIDE_DIALOG}>\n              <ExampleContent rowsCount={1} />\n            </DialogContentContainer>}>\n          <Button data-testid={CLICK_OUTSIDE_DIALOG_BUTTON} kind={Button.kinds.SECONDARY} active={clickOutsideButtonActive} onClick={switchClickOutsideActive} style={{\n          marginBlock: "54px"\n        }}>\n            On click outside\n          </Button>\n        </Dialog>\n        <Dialog modifiers={modifiers} shouldShowOnMount position={Dialog.positions.RIGHT} showTrigger={[Dialog.hideShowTriggers.CLICK]} hideTrigger={[Dialog.hideShowTriggers.CLICK]} content={<DialogContentContainer>\n              <ExampleContent rowsCount={1} />\n            </DialogContentContainer>}>\n          <Button kind={Button.kinds.SECONDARY} active={clickButtonActive} onClick={switchClickButtonActive} style={{\n          marginBlock: "54px"\n        }}>\n            On click\n          </Button>\n        </Dialog>\n        <Dialog modifiers={modifiers} shouldShowOnMount position={Dialog.positions.RIGHT} showTrigger={[Dialog.hideShowTriggers.FOCUS, Dialog.hideShowTriggers.CLICK]} hideTrigger={[Dialog.hideShowTriggers.BLUR]} content={<DialogContentContainer>\n              <ExampleContent rowsCount={1} />\n            </DialogContentContainer>}>\n          <Button kind={Button.kinds.SECONDARY} active={blurButtonActive} onClick={switchBlurButtonActive} style={{\n          marginBlock: "54px"\n        }}>\n            On blur\n          </Button>\n        </Dialog>\n        <Dialog modifiers={modifiers} shouldShowOnMount position={Dialog.positions.RIGHT} showTrigger={[Dialog.hideShowTriggers.CLICK]} hideTrigger={[Dialog.hideShowTriggers.CONTENT_CLICK]} onContentClick={switchContentClickActive} content={<DialogContentContainer>\n              <ExampleContent rowsCount={1} />\n            </DialogContentContainer>}>\n          <Button kind={Button.kinds.SECONDARY} active={contentClickButtonActive} onClick={switchContentClickActive} style={{\n          marginBlock: "54px"\n        }}>\n            On content click\n          </Button>\n        </Dialog>\n        <Dialog modifiers={modifiers} shouldShowOnMount showTrigger={[Dialog.hideShowTriggers.MOUSE_ENTER]} hideTrigger={[Dialog.hideShowTriggers.MOUSE_LEAVE]} position={Dialog.positions.RIGHT} onDialogDidHide={switchMouseLeaveActive} onDialogDidShow={switchMouseLeaveActive} content={<DialogContentContainer>\n              <ExampleContent rowsCount={1} />\n            </DialogContentContainer>}>\n          <Button kind={Button.kinds.SECONDARY} active={mouseLeaveButtonActive} onClick={switchMouseLeaveActive} style={{\n          marginBlock: "54px"\n        }}>\n            On mouse leave\n          </Button>\n        </Dialog>\n        <Dialog modifiers={modifiers} shouldShowOnMount showTrigger={[Dialog.hideShowTriggers.CLICK]} hideTrigger={[Dialog.hideShowTriggers.CONTEXT_MENU]} position={Dialog.positions.RIGHT} containerSelector={`#${HIDE_TRIGGERS_CONTAINER}`} onDialogDidHide={switchContextMenuActive} onDialogDidShow={switchContextMenuActive} content={<DialogContentContainer data-testid={CONTEXT_MENU_DIALOG}>\n              <ExampleContent rowsCount={1} />\n            </DialogContentContainer>}>\n          <Button kind={Button.kinds.SECONDARY} active={contextMenuButtonActive} style={{\n          marginBlock: "54px"\n        }}>\n            On right click\n          </Button>\n        </Dialog>\n      </Flex>;\n  },\n  name: "Hide triggers",\n  play: closeTriggersInteractionSuite,\n  parameters: {\n    chromatic: {\n      pauseAnimationAtEnd: true\n    },\n    docs: {\n      liveEdit: {\n        scope: {\n          HIDE_TRIGGERS_CONTAINER,\n          CLICK_OUTSIDE_DIALOG,\n          CLICK_OUTSIDE_DIALOG_BUTTON,\n          CONTEXT_MENU_DIALOG\n        }\n      }\n    }\n  }\n}',...HideTriggers.parameters?.docs?.source}}},ControlledDialog.parameters={...ControlledDialog.parameters,docs:{...ControlledDialog.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const {\n      isChecked: isOpen,\n      onChange: setIsOpen\n    } = useSwitch({\n      defaultChecked: false\n    });\n    return <Dialog\n    //disable default triggers\n    showTrigger={[]}\n    // manage the opening state in the app level\n    open={isOpen} content={<DialogContentContainer>\n            <DialogContentContainer>\n              <Button kind={Button.kinds.SECONDARY}\n        // @ts-ignore\n        onClick={() => setIsOpen(false)}>\n                This will close as well\n              </Button>\n            </DialogContentContainer>\n          </DialogContentContainer>}>\n        <Button\n      // @ts-ignore\n      onClick={() => setIsOpen(!isOpen)}>\n          Click me to toggle the Dialog\n        </Button>\n      </Dialog>;\n  },\n  name: "Controlled Dialog"\n}',...ControlledDialog.parameters?.docs?.source}}},DialogWithTooltip.parameters={...DialogWithTooltip.parameters,docs:{...DialogWithTooltip.parameters?.docs,source:{originalSource:'{\n  // for prevent dialog to move while scrolling\n  render: () => {\n    const modifiers = [{\n      name: "preventOverflow",\n      options: {\n        mainAxis: false\n      }\n    }];\n    return <div className="monday-storybook-dialog--story-padding">\n        <Dialog tooltip modifiers={modifiers} shouldShowOnMount showTrigger={[Dialog.hideShowTriggers.CLICK]} hideTrigger={[Dialog.hideShowTriggers.CLICK]} position={Dialog.positions.RIGHT} content={<DialogContentContainer>\n              <ExampleContent />\n            </DialogContentContainer>}>\n          <IconButton icon={Info} active kind={IconButton.kinds.SECONDARY} />\n        </Dialog>\n      </div>;\n  },\n  name: "Dialog with tooltip",\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          Info\n        }\n      }\n    }\n  }\n}',...DialogWithTooltip.parameters?.docs?.source}}},DisableScrollWhenDialogOpen.parameters={...DisableScrollWhenDialogOpen.parameters,docs:{...DisableScrollWhenDialogOpen.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    // For maintain active state of each button according to the dialog open state (this hooks is available for your usage)\n    const {\n      isChecked: checkedTop,\n      onChange: onChangeTop\n    } = useSwitch({\n      defaultChecked: false\n    });\n    return <Flex className="monday-storybook-dialog--story-padding" gap={Flex.gaps.MEDIUM}>\n        <div className={"scrollable"} style={{\n        height: "300px",\n        width: "400px",\n        overflow: "auto"\n      }}>\n          <div style={{\n          height: "800px"\n        }}>\n            <Dialog open={checkedTop} position={Dialog.positions.LEFT} showTrigger={[]} hideTrigger={[]} containerSelector={".scrollable"} disableContainerScroll content={<DialogContentContainer>\n                  <ExampleContent />\n                </DialogContentContainer>}>\n              <Button kind={Button.kinds.SECONDARY} onClick={onChangeTop} active={checkedTop}>\n                Click\n              </Button>\n            </Dialog>\n          </div>\n        </div>\n      </Flex>;\n  },\n  name: "Disable scroll when dialog open"\n}',...DisableScrollWhenDialogOpen.parameters?.docs?.source}}};const __namedExportsOrder=["Overview","Positions","ShowTriggers","HideTriggers","ControlledDialog","DialogWithTooltip","DisableScrollWhenDialogOpen"]},"./src/__tests__/interactions-helper.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{S:()=>resetFocus});var _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/@storybook/testing-library/dist/index.mjs");async function resetFocus(){const focusTrap=document.querySelector("[data-testid=focusTrap]");await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.Q4.click(focusTrap)}},"./src/tests/interactions-utils.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Jw:()=>expectActiveElementToHavePartialText,Ld:()=>interactionSuite,NX:()=>getByLabelText,Tf:()=>getByText,Xr:()=>getFirstByClassName,Z8:()=>clearText,cb:()=>delay,gy:()=>getByRole,h5:()=>getByTestId,jp:()=>clickElement,kD:()=>typeMultipleTimes,lI:()=>waitForElementVisible,vZ:()=>pressNavigationKey,wQ:()=>typeText});var _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/@storybook/testing-library/dist/index.mjs"),_testing_library_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/@testing-library/react/dist/@testing-library/react.esm.js"),_constants__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/tests/constants.ts"),_storybook_jest__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../node_modules/@storybook/jest/dist/index.mjs");const testFunctionWrapper=testFunc=>async _ref=>{let{canvasElement,args}=_ref;const canvas=getWithin(canvasElement);return testFunc(canvas,args)},clearText=async element=>{_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.Q4.clear(element)};function logFunctionStart(name){(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_2__.E)(` ➡️ ${name}`).toBeDefined()}function getWithin(canvasOrValidTestElement){if(canvasOrValidTestElement instanceof HTMLElement){const result=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.ux)(canvasOrValidTestElement);if(result instanceof Error)throw result;return result}if(canvasOrValidTestElement.getByRole)return canvasOrValidTestElement}const interactionSuite=_ref3=>{let{beforeEach=null,beforeAll=null,skip=!1,tests,afterEach=null,afterAll=null}=_ref3;return async _ref4=>{let{canvasElement,args}=_ref4;if(!skip){beforeAll&&(logFunctionStart("Before all:"),await testFunctionWrapper(beforeAll)({canvasElement,args}));for(const test of tests){const fnName=test.name;beforeEach&&(logFunctionStart(`Before: ${fnName}`),await testFunctionWrapper(beforeEach)({canvasElement,args})),logFunctionStart(`Running : ${fnName}`),await testFunctionWrapper(test)({canvasElement,args}),afterEach&&(logFunctionStart(`After: ${fnName}`),await testFunctionWrapper(afterEach)({canvasElement,args}))}afterAll&&(logFunctionStart("After all:"),await testFunctionWrapper(afterAll)({canvasElement,args}))}}},getByTestId=(rootElement,dataTestId)=>getWithin(rootElement).getByTestId(dataTestId),getFirstByClassName=className=>document.getElementsByClassName(className)[0],getByRole=function(rootElement,role){let options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return getWithin(rootElement).getByRole(role,options)},getByLabelText=(rootElement,text)=>getWithin(rootElement).getByLabelText(text),getByText=function(rootElement,text){let options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return getWithin(rootElement).getByText(text,options)},clickElement=element=>_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.Q4.click(element),typeText=async function(element,text){let waitForDebounceMs=arguments.length>2&&void 0!==arguments[2]?arguments[2]:250;const promise=_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.Q4.type(element,text,{delay:50}),result=await promise;return await delay(waitForDebounceMs),result},expectActiveElementToHavePartialText=text=>{(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_2__.E)(document.activeElement).toHaveTextContent(text)},pressNavigationKey=async function(){let command=arguments.length>0&&void 0!==arguments[0]?arguments[0]:_constants__WEBPACK_IMPORTED_MODULE_3__.G.TAB,waitForDebounceMs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const promise=command===_constants__WEBPACK_IMPORTED_MODULE_3__.G.TAB?_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.Q4.tab():_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.Q4.keyboard(command),result=await promise;return await delay(waitForDebounceMs),result};function delay(timeout){return new Promise((resolve=>{if(!timeout)return resolve(void 0);setTimeout(resolve,timeout)}))}const waitForElementVisible=getterFunc=>new Promise((resolve=>{let element;(0,_testing_library_react__WEBPACK_IMPORTED_MODULE_1__.fm)((async()=>{element=await getterFunc(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_2__.E)(element).toBeVisible()})).then((()=>{resolve(element)}))})),typeMultipleTimes=async function(text,count){let options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{delay:70};text=text.repeat(count),await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.Q4.keyboard(text,options)}}}]);