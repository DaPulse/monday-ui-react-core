"use strict";(globalThis.webpackChunkmonday_ui_react_core=globalThis.webpackChunkmonday_ui_react_core||[]).push([[3039],{"./src/components/Chips/__stories__/Chips.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ChipsInAPersonPickerComboBox:()=>ChipsInAPersonPickerComboBox,ChipsPalette:()=>ChipsPalette,ChipsWithAvatars:()=>ChipsWithAvatars,ChipsWithIcons:()=>ChipsWithIcons,ChipsWithReadOnlyState:()=>ChipsWithReadOnlyState,Clickable:()=>Clickable,ColorfulChipsForDifferentContent:()=>ColorfulChipsForDifferentContent,OnColor:()=>OnColor,Overview:()=>Overview,Themes:()=>Themes,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Chips_stories});__webpack_require__("../../node_modules/react/index.js");var _baseSlice=__webpack_require__("../../node_modules/lodash-es/_baseSlice.js"),_isIterateeCall=__webpack_require__("../../node_modules/lodash-es/_isIterateeCall.js"),toInteger=__webpack_require__("../../node_modules/lodash-es/toInteger.js"),nativeCeil=Math.ceil,nativeMax=Math.max;const lodash_es_chunk=function chunk(array,size,guard){size=(guard?(0,_isIterateeCall.A)(array,size,guard):void 0===size)?1:nativeMax((0,toInteger.A)(size),0);var length=null==array?0:array.length;if(!length||size<1)return[];for(var index=0,resIndex=0,result=Array(nativeCeil(length/size));index<length;)result[resIndex++]=(0,_baseSlice.A)(array,index,index+=size);return result};var Flex=__webpack_require__("./src/components/Flex/Flex.tsx"),Chips=__webpack_require__("./src/components/Chips/Chips.tsx"),Text=__webpack_require__("./src/components/Text/Text.tsx"),createStoryMetaSettingsDecorator=__webpack_require__("./src/storybook/functions/createStoryMetaSettingsDecorator.ts"),createComponentTemplate=__webpack_require__("../storybook-blocks/dist/src/functions/createComponentTemplate.js"),Search=__webpack_require__("./src/components/Search/Search.tsx"),Avatar=__webpack_require__("./src/components/Avatar/Avatar.tsx"),DialogContentContainer=__webpack_require__("./src/components/DialogContentContainer/DialogContentContainer.tsx"),Email=__webpack_require__("./src/components/Icon/Icons/components/Email.tsx");const person1_namespaceObject=__webpack_require__.p+"static/media/person1.41f4134f.png",rotem_namespaceObject=__webpack_require__.p+"static/media/rotem.3924d3b3.png";var function_utils=__webpack_require__("./src/utils/function-utils.ts"),injectStylesIntoStyleTag=__webpack_require__("../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),injectStylesIntoStyleTag_default=__webpack_require__.n(injectStylesIntoStyleTag),styleDomAPI=__webpack_require__("../../node_modules/style-loader/dist/runtime/styleDomAPI.js"),styleDomAPI_default=__webpack_require__.n(styleDomAPI),insertBySelector=__webpack_require__("../../node_modules/style-loader/dist/runtime/insertBySelector.js"),insertBySelector_default=__webpack_require__.n(insertBySelector),setAttributesWithoutAttributes=__webpack_require__("../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),setAttributesWithoutAttributes_default=__webpack_require__.n(setAttributesWithoutAttributes),insertStyleElement=__webpack_require__("../../node_modules/style-loader/dist/runtime/insertStyleElement.js"),insertStyleElement_default=__webpack_require__.n(insertStyleElement),styleTagTransform=__webpack_require__("../../node_modules/style-loader/dist/runtime/styleTagTransform.js"),styleTagTransform_default=__webpack_require__.n(styleTagTransform),Chips_stories_module=__webpack_require__("../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[16].use[1]!../../node_modules/resolve-url-loader/index.js!../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[16].use[3]!./src/components/Chips/__stories__/Chips.stories.module.scss"),options={};options.styleTagTransform=styleTagTransform_default(),options.setAttributes=setAttributesWithoutAttributes_default(),options.insert=insertBySelector_default().bind(null,"head"),options.domAPI=styleDomAPI_default(),options.insertStyleElement=insertStyleElement_default();injectStylesIntoStyleTag_default()(Chips_stories_module.A,options);const _stories_Chips_stories_module=Chips_stories_module.A&&Chips_stories_module.A.locals?Chips_stories_module.A.locals:void 0;var jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");const metaSettings=(0,createStoryMetaSettingsDecorator.B)({component:Chips.A,enumPropNamesArray:["color"],iconPropNamesArray:["rightIcon","leftIcon"],actionPropsArray:["onDelete","onMouseDown","onClick"]}),chipsTemplate=(0,createComponentTemplate.M)(Chips.A),Chips_stories={parameters:{storySource:{source:'import React from "react";\nimport { chunk as _chunk } from "lodash-es";\nimport Flex from "../../Flex/Flex";\nimport Chips from "../Chips";\nimport Text from "../../Text/Text";\nimport { createStoryMetaSettingsDecorator } from "../../../storybook";\nimport { createComponentTemplate } from "vibe-storybook-components";\nimport Search from "../../Search/Search";\nimport Avatar from "../../Avatar/Avatar";\nimport DialogContentContainer from "../../DialogContentContainer/DialogContentContainer";\nimport { Email } from "../../Icon/Icons";\nimport person1 from "./assets/person1.png";\nimport rotem from "./assets/rotem.png";\nimport { NOOP } from "../../../utils/function-utils";\nimport styles from "./Chips.stories.module.scss";\n\nconst metaSettings = createStoryMetaSettingsDecorator({\n  component: Chips,\n  enumPropNamesArray: ["color"],\n  iconPropNamesArray: ["rightIcon", "leftIcon"],\n  actionPropsArray: ["onDelete", "onMouseDown", "onClick"]\n});\n\nconst chipsTemplate = createComponentTemplate(Chips);\n\nexport default {\n  title: "Data display/Chips",\n  component: Chips,\n  argTypes: metaSettings.argTypes,\n  decorators: metaSettings.decorators\n};\n\nexport const Overview = {\n  render: chipsTemplate.bind({}),\n  name: "Overview",\n\n  args: {\n    label: "This is a chip",\n    onMouseDown: () => {},\n    onClick: () => {}\n  }\n};\n\nexport const ChipsWithReadOnlyState = {\n  render: () => <Chips label="Read only chip" readOnly />,\n  name: "Chips with read only state"\n};\n\nexport const ChipsWithIcons = {\n  render: () => (\n    <>\n      <Chips label="Chip with left icon" leftIcon={Email} />\n      <Chips label="Chip with right icon" rightIcon={Email} />\n    </>\n  ),\n  name: "Chips with icons"\n};\n\nexport const ChipsWithAvatars = {\n  render: () => (\n    <>\n      <Chips label="Chip with left avatar" leftAvatar={person1} />\n      <Chips label="Chip with right avatar" rightAvatar={person1} />\n    </>\n  ),\n  name: "Chips with avatars"\n};\n\nexport const Themes = {\n  render: () => (\n    <>\n      <Chips label="This is a long chip" />\n      <Chips label="Chip positive" color={Chips.colors.POSITIVE} />\n      <Chips label="Chip negative" color={Chips.colors.NEGATIVE} />\n      <Chips label="Chip warning" color={Chips.colors.WARNING} />\n      <Chips label="Disabled" disabled />\n    </>\n  ),\n  name: "Themes"\n};\n\nexport const Clickable = {\n  render: () => {\n    return (\n      <Flex direction={Flex.directions.ROW} gap={Flex.gaps.MEDIUM} align={Flex.align.START}>\n        <Chips label="Clickable default chip" readOnly onClick={NOOP} />\n        <Chips label="Clickable removable chip" onClick={NOOP} />\n      </Flex>\n    );\n  },\n\n  name: "Clickable"\n};\n\nexport const ChipsPalette = {\n  render: () => {\n    const excludedColors = [Chips.colors.DARK_INDIGO, Chips.colors.BLACKISH];\n    const allowedColorsChunks = _chunk(\n      // @ts-ignore\n      Object.keys(Chips.colors).filter(k => !excludedColors.includes(Chips.colors[k])),\n      7\n    );\n    return (\n      <Flex\n        style={{\n          width: "100%",\n          height: 300\n        }}\n        align={Flex.align.STRETCH}\n      >\n        {allowedColorsChunks.map((colorChunk: any) => {\n          return (\n            <Flex\n              direction={Flex.directions.COLUMN}\n              key={colorChunk}\n              justify={Flex.justify.SPACE_BETWEEN}\n              align={Flex.align.STRETCH}\n            >\n              {colorChunk.map((colorName: any) => (\n                // @ts-ignore\n                <Chips label={colorName} key={colorName} color={Chips.colors[colorName]} readOnly allowTextSelection />\n              ))}\n            </Flex>\n          );\n        })}\n      </Flex>\n    );\n  },\n\n  name: "Chips palette"\n};\n\nexport const OnColor = {\n  render: () => (\n    <Flex\n      style={{\n        width: "100%"\n      }}\n      align={Flex.align.STRETCH}\n      justify={Flex.justify.START}\n    >\n      <Flex\n        align={Flex.align.CENTER}\n        justify={Flex.justify.CENTER}\n        style={{\n          background: "var(--sb-primary-selected-color)",\n          width: "124px",\n          height: "64px",\n          margin: "var(--sb-spacing-small)",\n          borderRadius: "var(--sb-border-radius-small)"\n        }}\n      >\n        <Chips label="On selected" showBorder readOnly />\n      </Flex>\n      <Flex\n        align={Flex.align.CENTER}\n        justify={Flex.justify.CENTER}\n        style={{\n          background: "var(--positive-color-selected)",\n          width: "124px",\n          height: "64px",\n          margin: "var(--sb-spacing-small)",\n          borderRadius: "var(--sb-border-radius-small)"\n        }}\n      >\n        <Chips label="On positive" showBorder color={Chips.colors.POSITIVE} readOnly />\n      </Flex>\n      <Flex\n        align={Flex.align.CENTER}\n        justify={Flex.justify.CENTER}\n        style={{\n          background: "var(--sb-negative-color-selected)",\n          width: "124px",\n          height: "64px",\n          margin: "var(--sb-spacing-small)",\n          borderRadius: "var(--sb-border-radius-small)"\n        }}\n      >\n        <Chips label="On negative" showBorder color={Chips.colors.NEGATIVE} readOnly />\n      </Flex>\n    </Flex>\n  ),\n\n  name: "On color"\n};\n\nexport const ColorfulChipsForDifferentContent = {\n  render: () => (\n    <DialogContentContainer className={styles.searchBar}>\n      <div className={styles.item}>\n        <Chips label="January" color={Chips.colors.POSITIVE} />\n      </div>\n      <Search />\n      <div className={styles.item}>\n        <Chips label="August" readOnly color={Chips.colors.LIPSTICK} />\n      </div>\n      <div className={styles.item}>\n        <Chips label="April" readOnly color={Chips.colors.BUBBLE} />\n      </div>\n      <div className={styles.item}>\n        <Chips label="March" readOnly color={Chips.colors.EGG_YOLK} />\n      </div>\n    </DialogContentContainer>\n  ),\n\n  name: "Colorful chips for different content"\n};\n\nexport const ChipsInAPersonPickerComboBox = {\n  render: () => (\n    <DialogContentContainer className={styles.searchBar}>\n      <Search placeholder="Search names, positions, or a team" />\n      <Flex align={Flex.align.CENTER} justify={Flex.justify.CENTER}>\n        <Chips label="Esther Schanler" leftAvatar={person1} />\n        <Chips label="Rotem Dekel" leftAvatar={rotem} />\n      </Flex>\n      <Text type={Text.types.TEXT2} className={styles.lable}>\n        Suggested people\n      </Text>\n      <div className={styles.search}>\n        <Flex align={Flex.align.CENTER} justify={Flex.justify.CENTER} key="cont-1">\n          <Avatar size={Avatar.sizes.SMALL} src={person1} type={Avatar.types.IMG} />\n          <Text type={Text.types.TEXT2} className={styles.name}>\n            May Kishon <span>(UX/UI Product Designer)</span>\n          </Text>\n        </Flex>\n        <Flex align={Flex.align.CENTER} justify={Flex.justify.CENTER} key="cont-2">\n          <Avatar\n            size={Avatar.sizes.SMALL}\n            backgroundColor={Avatar.colors.DARK_PURPLE}\n            text="LC"\n            type={Avatar.types.TEXT}\n          />\n          <Text type={Text.types.TEXT2} className={styles.name}>\n            Liron Cohen <span>(Customer Experience)</span>\n          </Text>\n        </Flex>\n        <Flex align={Flex.align.CENTER} justify={Flex.justify.CENTER} key="cont-3">\n          <Avatar size={Avatar.sizes.SMALL} text="AL" type={Avatar.types.TEXT} />\n          <Text type={Text.types.TEXT2} className={styles.name}>\n            Amanda Lawrence <span>(Customer Experience Designer)</span>\n          </Text>\n        </Flex>\n        <Flex align={Flex.align.CENTER} justify={Flex.justify.CENTER} key="cont-4">\n          <Avatar size={Avatar.sizes.SMALL} text="DY" type={Avatar.types.TEXT} backgroundColor={Avatar.colors.PEACH} />\n          <Text type={Text.types.TEXT2} className={styles.name}>\n            Dor Yehuda <span>(Customer Experience Designer)</span>\n          </Text>\n        </Flex>\n      </div>\n    </DialogContentContainer>\n  ),\n\n  name: "Chips in a person picker combo box"\n};\n',locationsMap:{overview:{startLoc:{col:24,line:33},endLoc:{col:1,line:42},startBody:{col:24,line:33},endBody:{col:1,line:42}},"chips-with-read-only-state":{startLoc:{col:38,line:44},endLoc:{col:1,line:47},startBody:{col:38,line:44},endBody:{col:1,line:47}},"chips-with-icons":{startLoc:{col:30,line:49},endLoc:{col:1,line:57},startBody:{col:30,line:49},endBody:{col:1,line:57}},"chips-with-avatars":{startLoc:{col:32,line:59},endLoc:{col:1,line:67},startBody:{col:32,line:59},endBody:{col:1,line:67}},themes:{startLoc:{col:22,line:69},endLoc:{col:1,line:80},startBody:{col:22,line:69},endBody:{col:1,line:80}},clickable:{startLoc:{col:25,line:82},endLoc:{col:1,line:93},startBody:{col:25,line:82},endBody:{col:1,line:93}},"chips-palette":{startLoc:{col:28,line:95},endLoc:{col:1,line:131},startBody:{col:28,line:95},endBody:{col:1,line:131}},"on-color":{startLoc:{col:23,line:133},endLoc:{col:1,line:185},startBody:{col:23,line:133},endBody:{col:1,line:185}},"colorful-chips-for-different-content":{startLoc:{col:48,line:187},endLoc:{col:1,line:207},startBody:{col:48,line:187},endBody:{col:1,line:207}},"chips-in-a-person-picker-combo-box":{startLoc:{col:44,line:209},endLoc:{col:1,line:255},startBody:{col:44,line:209},endBody:{col:1,line:255}}}}},title:"Data display/Chips",component:Chips.A,argTypes:metaSettings.argTypes,decorators:metaSettings.decorators},Overview={render:chipsTemplate.bind({}),name:"Overview",args:{label:"This is a chip",onMouseDown:()=>{},onClick:()=>{}}},ChipsWithReadOnlyState={render:()=>(0,jsx_runtime.jsx)(Chips.A,{label:"Read only chip",readOnly:!0}),name:"Chips with read only state"},ChipsWithIcons={render:()=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Chips.A,{label:"Chip with left icon",leftIcon:Email.A}),(0,jsx_runtime.jsx)(Chips.A,{label:"Chip with right icon",rightIcon:Email.A})]}),name:"Chips with icons"},ChipsWithAvatars={render:()=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Chips.A,{label:"Chip with left avatar",leftAvatar:person1_namespaceObject}),(0,jsx_runtime.jsx)(Chips.A,{label:"Chip with right avatar",rightAvatar:person1_namespaceObject})]}),name:"Chips with avatars"},Themes={render:()=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Chips.A,{label:"This is a long chip"}),(0,jsx_runtime.jsx)(Chips.A,{label:"Chip positive",color:Chips.A.colors.POSITIVE}),(0,jsx_runtime.jsx)(Chips.A,{label:"Chip negative",color:Chips.A.colors.NEGATIVE}),(0,jsx_runtime.jsx)(Chips.A,{label:"Chip warning",color:Chips.A.colors.WARNING}),(0,jsx_runtime.jsx)(Chips.A,{label:"Disabled",disabled:!0})]}),name:"Themes"},Clickable={render:()=>(0,jsx_runtime.jsxs)(Flex.A,{direction:Flex.A.directions.ROW,gap:Flex.A.gaps.MEDIUM,align:Flex.A.align.START,children:[(0,jsx_runtime.jsx)(Chips.A,{label:"Clickable default chip",readOnly:!0,onClick:function_utils.tE}),(0,jsx_runtime.jsx)(Chips.A,{label:"Clickable removable chip",onClick:function_utils.tE})]}),name:"Clickable"},ChipsPalette={render:()=>{const excludedColors=[Chips.A.colors.DARK_INDIGO,Chips.A.colors.BLACKISH],allowedColorsChunks=lodash_es_chunk(Object.keys(Chips.A.colors).filter((k=>!excludedColors.includes(Chips.A.colors[k]))),7);return(0,jsx_runtime.jsx)(Flex.A,{style:{width:"100%",height:300},align:Flex.A.align.STRETCH,children:allowedColorsChunks.map((colorChunk=>(0,jsx_runtime.jsx)(Flex.A,{direction:Flex.A.directions.COLUMN,justify:Flex.A.justify.SPACE_BETWEEN,align:Flex.A.align.STRETCH,children:colorChunk.map((colorName=>(0,jsx_runtime.jsx)(Chips.A,{label:colorName,color:Chips.A.colors[colorName],readOnly:!0,allowTextSelection:!0},colorName)))},colorChunk)))})},name:"Chips palette"},OnColor={render:()=>(0,jsx_runtime.jsxs)(Flex.A,{style:{width:"100%"},align:Flex.A.align.STRETCH,justify:Flex.A.justify.START,children:[(0,jsx_runtime.jsx)(Flex.A,{align:Flex.A.align.CENTER,justify:Flex.A.justify.CENTER,style:{background:"var(--sb-primary-selected-color)",width:"124px",height:"64px",margin:"var(--sb-spacing-small)",borderRadius:"var(--sb-border-radius-small)"},children:(0,jsx_runtime.jsx)(Chips.A,{label:"On selected",showBorder:!0,readOnly:!0})}),(0,jsx_runtime.jsx)(Flex.A,{align:Flex.A.align.CENTER,justify:Flex.A.justify.CENTER,style:{background:"var(--positive-color-selected)",width:"124px",height:"64px",margin:"var(--sb-spacing-small)",borderRadius:"var(--sb-border-radius-small)"},children:(0,jsx_runtime.jsx)(Chips.A,{label:"On positive",showBorder:!0,color:Chips.A.colors.POSITIVE,readOnly:!0})}),(0,jsx_runtime.jsx)(Flex.A,{align:Flex.A.align.CENTER,justify:Flex.A.justify.CENTER,style:{background:"var(--sb-negative-color-selected)",width:"124px",height:"64px",margin:"var(--sb-spacing-small)",borderRadius:"var(--sb-border-radius-small)"},children:(0,jsx_runtime.jsx)(Chips.A,{label:"On negative",showBorder:!0,color:Chips.A.colors.NEGATIVE,readOnly:!0})})]}),name:"On color"},ColorfulChipsForDifferentContent={render:()=>(0,jsx_runtime.jsxs)(DialogContentContainer.A,{className:_stories_Chips_stories_module.searchBar,children:[(0,jsx_runtime.jsx)("div",{className:_stories_Chips_stories_module.item,children:(0,jsx_runtime.jsx)(Chips.A,{label:"January",color:Chips.A.colors.POSITIVE})}),(0,jsx_runtime.jsx)(Search.A,{}),(0,jsx_runtime.jsx)("div",{className:_stories_Chips_stories_module.item,children:(0,jsx_runtime.jsx)(Chips.A,{label:"August",readOnly:!0,color:Chips.A.colors.LIPSTICK})}),(0,jsx_runtime.jsx)("div",{className:_stories_Chips_stories_module.item,children:(0,jsx_runtime.jsx)(Chips.A,{label:"April",readOnly:!0,color:Chips.A.colors.BUBBLE})}),(0,jsx_runtime.jsx)("div",{className:_stories_Chips_stories_module.item,children:(0,jsx_runtime.jsx)(Chips.A,{label:"March",readOnly:!0,color:Chips.A.colors.EGG_YOLK})})]}),name:"Colorful chips for different content"},ChipsInAPersonPickerComboBox={render:()=>(0,jsx_runtime.jsxs)(DialogContentContainer.A,{className:_stories_Chips_stories_module.searchBar,children:[(0,jsx_runtime.jsx)(Search.A,{placeholder:"Search names, positions, or a team"}),(0,jsx_runtime.jsxs)(Flex.A,{align:Flex.A.align.CENTER,justify:Flex.A.justify.CENTER,children:[(0,jsx_runtime.jsx)(Chips.A,{label:"Esther Schanler",leftAvatar:person1_namespaceObject}),(0,jsx_runtime.jsx)(Chips.A,{label:"Rotem Dekel",leftAvatar:rotem_namespaceObject})]}),(0,jsx_runtime.jsx)(Text.A,{type:Text.A.types.TEXT2,className:_stories_Chips_stories_module.lable,children:"Suggested people"}),(0,jsx_runtime.jsxs)("div",{className:_stories_Chips_stories_module.search,children:[(0,jsx_runtime.jsxs)(Flex.A,{align:Flex.A.align.CENTER,justify:Flex.A.justify.CENTER,children:[(0,jsx_runtime.jsx)(Avatar.A,{size:Avatar.A.sizes.SMALL,src:person1_namespaceObject,type:Avatar.A.types.IMG}),(0,jsx_runtime.jsxs)(Text.A,{type:Text.A.types.TEXT2,className:_stories_Chips_stories_module.name,children:["May Kishon ",(0,jsx_runtime.jsx)("span",{children:"(UX/UI Product Designer)"})]})]},"cont-1"),(0,jsx_runtime.jsxs)(Flex.A,{align:Flex.A.align.CENTER,justify:Flex.A.justify.CENTER,children:[(0,jsx_runtime.jsx)(Avatar.A,{size:Avatar.A.sizes.SMALL,backgroundColor:Avatar.A.colors.DARK_PURPLE,text:"LC",type:Avatar.A.types.TEXT}),(0,jsx_runtime.jsxs)(Text.A,{type:Text.A.types.TEXT2,className:_stories_Chips_stories_module.name,children:["Liron Cohen ",(0,jsx_runtime.jsx)("span",{children:"(Customer Experience)"})]})]},"cont-2"),(0,jsx_runtime.jsxs)(Flex.A,{align:Flex.A.align.CENTER,justify:Flex.A.justify.CENTER,children:[(0,jsx_runtime.jsx)(Avatar.A,{size:Avatar.A.sizes.SMALL,text:"AL",type:Avatar.A.types.TEXT}),(0,jsx_runtime.jsxs)(Text.A,{type:Text.A.types.TEXT2,className:_stories_Chips_stories_module.name,children:["Amanda Lawrence ",(0,jsx_runtime.jsx)("span",{children:"(Customer Experience Designer)"})]})]},"cont-3"),(0,jsx_runtime.jsxs)(Flex.A,{align:Flex.A.align.CENTER,justify:Flex.A.justify.CENTER,children:[(0,jsx_runtime.jsx)(Avatar.A,{size:Avatar.A.sizes.SMALL,text:"DY",type:Avatar.A.types.TEXT,backgroundColor:Avatar.A.colors.PEACH}),(0,jsx_runtime.jsxs)(Text.A,{type:Text.A.types.TEXT2,className:_stories_Chips_stories_module.name,children:["Dor Yehuda ",(0,jsx_runtime.jsx)("span",{children:"(Customer Experience Designer)"})]})]},"cont-4")]})]}),name:"Chips in a person picker combo box"};Overview.parameters={...Overview.parameters,docs:{...Overview.parameters?.docs,source:{originalSource:'{\n  render: chipsTemplate.bind({}),\n  name: "Overview",\n  args: {\n    label: "This is a chip",\n    onMouseDown: () => {},\n    onClick: () => {}\n  }\n}',...Overview.parameters?.docs?.source}}},ChipsWithReadOnlyState.parameters={...ChipsWithReadOnlyState.parameters,docs:{...ChipsWithReadOnlyState.parameters?.docs,source:{originalSource:'{\n  render: () => <Chips label="Read only chip" readOnly />,\n  name: "Chips with read only state"\n}',...ChipsWithReadOnlyState.parameters?.docs?.source}}},ChipsWithIcons.parameters={...ChipsWithIcons.parameters,docs:{...ChipsWithIcons.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <Chips label="Chip with left icon" leftIcon={Email} />\n      <Chips label="Chip with right icon" rightIcon={Email} />\n    </>,\n  name: "Chips with icons"\n}',...ChipsWithIcons.parameters?.docs?.source}}},ChipsWithAvatars.parameters={...ChipsWithAvatars.parameters,docs:{...ChipsWithAvatars.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <Chips label="Chip with left avatar" leftAvatar={person1} />\n      <Chips label="Chip with right avatar" rightAvatar={person1} />\n    </>,\n  name: "Chips with avatars"\n}',...ChipsWithAvatars.parameters?.docs?.source}}},Themes.parameters={...Themes.parameters,docs:{...Themes.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <Chips label="This is a long chip" />\n      <Chips label="Chip positive" color={Chips.colors.POSITIVE} />\n      <Chips label="Chip negative" color={Chips.colors.NEGATIVE} />\n      <Chips label="Chip warning" color={Chips.colors.WARNING} />\n      <Chips label="Disabled" disabled />\n    </>,\n  name: "Themes"\n}',...Themes.parameters?.docs?.source}}},Clickable.parameters={...Clickable.parameters,docs:{...Clickable.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    return <Flex direction={Flex.directions.ROW} gap={Flex.gaps.MEDIUM} align={Flex.align.START}>\n        <Chips label="Clickable default chip" readOnly onClick={NOOP} />\n        <Chips label="Clickable removable chip" onClick={NOOP} />\n      </Flex>;\n  },\n  name: "Clickable"\n}',...Clickable.parameters?.docs?.source}}},ChipsPalette.parameters={...ChipsPalette.parameters,docs:{...ChipsPalette.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const excludedColors = [Chips.colors.DARK_INDIGO, Chips.colors.BLACKISH];\n    const allowedColorsChunks = _chunk(\n    // @ts-ignore\n    Object.keys(Chips.colors).filter(k => !excludedColors.includes(Chips.colors[k])), 7);\n    return <Flex style={{\n      width: "100%",\n      height: 300\n    }} align={Flex.align.STRETCH}>\n        {allowedColorsChunks.map((colorChunk: any) => {\n        return <Flex direction={Flex.directions.COLUMN} key={colorChunk} justify={Flex.justify.SPACE_BETWEEN} align={Flex.align.STRETCH}>\n              {colorChunk.map((colorName: any) =>\n          // @ts-ignore\n          <Chips label={colorName} key={colorName} color={Chips.colors[colorName]} readOnly allowTextSelection />)}\n            </Flex>;\n      })}\n      </Flex>;\n  },\n  name: "Chips palette"\n}',...ChipsPalette.parameters?.docs?.source}}},OnColor.parameters={...OnColor.parameters,docs:{...OnColor.parameters?.docs,source:{originalSource:'{\n  render: () => <Flex style={{\n    width: "100%"\n  }} align={Flex.align.STRETCH} justify={Flex.justify.START}>\n      <Flex align={Flex.align.CENTER} justify={Flex.justify.CENTER} style={{\n      background: "var(--sb-primary-selected-color)",\n      width: "124px",\n      height: "64px",\n      margin: "var(--sb-spacing-small)",\n      borderRadius: "var(--sb-border-radius-small)"\n    }}>\n        <Chips label="On selected" showBorder readOnly />\n      </Flex>\n      <Flex align={Flex.align.CENTER} justify={Flex.justify.CENTER} style={{\n      background: "var(--positive-color-selected)",\n      width: "124px",\n      height: "64px",\n      margin: "var(--sb-spacing-small)",\n      borderRadius: "var(--sb-border-radius-small)"\n    }}>\n        <Chips label="On positive" showBorder color={Chips.colors.POSITIVE} readOnly />\n      </Flex>\n      <Flex align={Flex.align.CENTER} justify={Flex.justify.CENTER} style={{\n      background: "var(--sb-negative-color-selected)",\n      width: "124px",\n      height: "64px",\n      margin: "var(--sb-spacing-small)",\n      borderRadius: "var(--sb-border-radius-small)"\n    }}>\n        <Chips label="On negative" showBorder color={Chips.colors.NEGATIVE} readOnly />\n      </Flex>\n    </Flex>,\n  name: "On color"\n}',...OnColor.parameters?.docs?.source}}},ColorfulChipsForDifferentContent.parameters={...ColorfulChipsForDifferentContent.parameters,docs:{...ColorfulChipsForDifferentContent.parameters?.docs,source:{originalSource:'{\n  render: () => <DialogContentContainer className={styles.searchBar}>\n      <div className={styles.item}>\n        <Chips label="January" color={Chips.colors.POSITIVE} />\n      </div>\n      <Search />\n      <div className={styles.item}>\n        <Chips label="August" readOnly color={Chips.colors.LIPSTICK} />\n      </div>\n      <div className={styles.item}>\n        <Chips label="April" readOnly color={Chips.colors.BUBBLE} />\n      </div>\n      <div className={styles.item}>\n        <Chips label="March" readOnly color={Chips.colors.EGG_YOLK} />\n      </div>\n    </DialogContentContainer>,\n  name: "Colorful chips for different content"\n}',...ColorfulChipsForDifferentContent.parameters?.docs?.source}}},ChipsInAPersonPickerComboBox.parameters={...ChipsInAPersonPickerComboBox.parameters,docs:{...ChipsInAPersonPickerComboBox.parameters?.docs,source:{originalSource:'{\n  render: () => <DialogContentContainer className={styles.searchBar}>\n      <Search placeholder="Search names, positions, or a team" />\n      <Flex align={Flex.align.CENTER} justify={Flex.justify.CENTER}>\n        <Chips label="Esther Schanler" leftAvatar={person1} />\n        <Chips label="Rotem Dekel" leftAvatar={rotem} />\n      </Flex>\n      <Text type={Text.types.TEXT2} className={styles.lable}>\n        Suggested people\n      </Text>\n      <div className={styles.search}>\n        <Flex align={Flex.align.CENTER} justify={Flex.justify.CENTER} key="cont-1">\n          <Avatar size={Avatar.sizes.SMALL} src={person1} type={Avatar.types.IMG} />\n          <Text type={Text.types.TEXT2} className={styles.name}>\n            May Kishon <span>(UX/UI Product Designer)</span>\n          </Text>\n        </Flex>\n        <Flex align={Flex.align.CENTER} justify={Flex.justify.CENTER} key="cont-2">\n          <Avatar size={Avatar.sizes.SMALL} backgroundColor={Avatar.colors.DARK_PURPLE} text="LC" type={Avatar.types.TEXT} />\n          <Text type={Text.types.TEXT2} className={styles.name}>\n            Liron Cohen <span>(Customer Experience)</span>\n          </Text>\n        </Flex>\n        <Flex align={Flex.align.CENTER} justify={Flex.justify.CENTER} key="cont-3">\n          <Avatar size={Avatar.sizes.SMALL} text="AL" type={Avatar.types.TEXT} />\n          <Text type={Text.types.TEXT2} className={styles.name}>\n            Amanda Lawrence <span>(Customer Experience Designer)</span>\n          </Text>\n        </Flex>\n        <Flex align={Flex.align.CENTER} justify={Flex.justify.CENTER} key="cont-4">\n          <Avatar size={Avatar.sizes.SMALL} text="DY" type={Avatar.types.TEXT} backgroundColor={Avatar.colors.PEACH} />\n          <Text type={Text.types.TEXT2} className={styles.name}>\n            Dor Yehuda <span>(Customer Experience Designer)</span>\n          </Text>\n        </Flex>\n      </div>\n    </DialogContentContainer>,\n  name: "Chips in a person picker combo box"\n}',...ChipsInAPersonPickerComboBox.parameters?.docs?.source}}};const __namedExportsOrder=["Overview","ChipsWithReadOnlyState","ChipsWithIcons","ChipsWithAvatars","Themes","Clickable","ChipsPalette","OnColor","ColorfulChipsForDifferentContent","ChipsInAPersonPickerComboBox"]},"../storybook-blocks/dist/src/functions/createComponentTemplate.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{M:()=>r});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/jsx-runtime.js");function r(r){return e=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(r,Object.assign({},e))}},"../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[16].use[1]!../../node_modules/resolve-url-loader/index.js!../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[16].use[3]!./src/components/Chips/__stories__/Chips.stories.module.scss":(module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/css-loader/dist/runtime/sourceMaps.js"),_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__),_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/css-loader/dist/runtime/api.js"),___CSS_LOADER_EXPORT___=__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__)()(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default());___CSS_LOADER_EXPORT___.push([module.id,".Chips-stories-module_searchBar{display:flex;flex-direction:column;align-items:flex-start;gap:var(--spacing-medium);padding:var(--spacing-medium)}.Chips-stories-module_search{display:flex;flex-direction:column;align-items:flex-start;gap:var(--spacing-medium)}.Chips-stories-module_item{width:max-content}.Chips-stories-module_lable{padding-left:var(--spacing-xs);margin-top:var(--spacing-xs)}.Chips-stories-module_inlineContainer{display:flex;align-items:center;justify-content:center}.Chips-stories-module_name{padding:0 var(--spacing-small)}.Chips-stories-module_name span{color:var(--sb-secondary-text-color)}","",{version:3,sources:["webpack://./src/components/Chips/__stories__/Chips.stories.module.scss"],names:[],mappings:"AAAA,gCACE,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,yBAAA,CACA,6BAAA,CAGF,6BACE,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,yBAAA,CAGF,2BACE,iBAAA,CAGF,4BACE,8BAAA,CACA,4BAAA,CAGF,sCACE,YAAA,CACA,kBAAA,CACA,sBAAA,CAGF,2BACE,8BAAA,CAEA,gCACE,oCAAA",sourcesContent:[".searchBar {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: var(--spacing-medium);\n  padding: var(--spacing-medium);\n}\n\n.search {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: var(--spacing-medium);\n}\n\n.item {\n  width: max-content;\n}\n\n.lable {\n  padding-left: var(--spacing-xs);\n  margin-top: var(--spacing-xs);\n}\n\n.inlineContainer {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.name {\n  padding: 0 var(--spacing-small);\n\n  span {\n    color: var(--sb-secondary-text-color);\n  }\n}\n"],sourceRoot:""}]),___CSS_LOADER_EXPORT___.locals={searchBar:"Chips-stories-module_searchBar",search:"Chips-stories-module_search",item:"Chips-stories-module_item",lable:"Chips-stories-module_lable",inlineContainer:"Chips-stories-module_inlineContainer",name:"Chips-stories-module_name"};const __WEBPACK_DEFAULT_EXPORT__=___CSS_LOADER_EXPORT___}}]);