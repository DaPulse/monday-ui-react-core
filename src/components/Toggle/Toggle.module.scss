@import "../../styles/states";
@import "../../styles/global-css-settings";

/* in the new toggle we drew. */

/* When the hidden checkbox will be focused by keyboard navigation events, the toggle appearance will reflect it */

.input:focus-visible ~ .toggle,
.input.focusVisible ~ .toggle {
  @include focus-style-css();
}

/* In order to allow accessibility, all operations will be performed on the hidden checkbox and be reflected */

.toggle {
  @include reset-button();
  transition: background-color var(--motion-productive-medium) var(--motion-timing-transition);
  margin: 0 $spacing-small;
  position: relative;
  height: 24px;
  width: 41px;
  cursor: pointer;
  border-radius: 100px !important;
}

.toggle::after {
  @include theme-prop(background-color, primary-background-color);
  content: " ";
  position: absolute;
  width: 18px;
  height: 18px;
  border-radius: 50%;
  top: calc(50% - 18px / 2);
  transition: left var(--motion-productive-medium) var(--motion-timing-transition);
}

.selected {
  @include theme-prop(background-color, primary-color);
}

.selected::after {
  left: 20px;
}

.notSelected {
  @include theme-prop(background-color, ui-border-color);
}

.notSelected::after {
  left: 3px;
}

/* we hide the checkbox and draw a new one instead. */

.text {
  @include theme-prop(color, primary-text-color);
  font-style: normal;
  font-weight: normal;
  size: 14px;
  line-height: 22px;
}

/* Since it is not possible to change the design of the checkbox according to the storybook toggle requirements using css, */

.wrapper {
  display: flex;
  align-items: center;
}

.disabled .toggle {
  opacity: var(--disabled-component-opacity);
  cursor: not-allowed;
}

.disabled .text {
  color: var(--disabled-text-color);
}
