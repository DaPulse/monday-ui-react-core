"use strict";(globalThis.webpackChunkmonday_ui_react_core=globalThis.webpackChunkmonday_ui_react_core||[]).push([[955],{"./src/components/Dropdown/__stories__/Dropdown.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AsyncDropdown:()=>AsyncDropdown,Disabled:()=>Disabled,DropdownInsideAForm:()=>DropdownInsideAForm,DropdownInsidePopover:()=>DropdownInsidePopover,DropdownValueSelection:()=>DropdownValueSelection,DropdownWithAvatar:()=>DropdownWithAvatar,DropdownWithChipColors:()=>DropdownWithChipColors,DropdownWithChips:()=>DropdownWithChips,DropdownWithGroups:()=>DropdownWithGroups,DropdownWithIcon:()=>DropdownWithIcon,DropdownWithLabels:()=>DropdownWithLabels,DropdownWithLoading:()=>DropdownWithLoading,DropdownWithRef:()=>DropdownWithRef,DropdownWithTooltipsOnItems:()=>DropdownWithTooltipsOnItems,MultiChoiceWithDifferentStates:()=>MultiChoiceWithDifferentStates,Overview:()=>Overview,Readonly:()=>Readonly,Rtl:()=>Rtl,SearchableDropdown:()=>SearchableDropdown,Sizes:()=>Sizes,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Dropdown_stories_Dropdown_stories});var react=__webpack_require__("../../node_modules/react/index.js"),story_description=__webpack_require__("../storybook-blocks/dist/src/components/story-description/story-description.js"),createStoryMetaSettingsDecorator=__webpack_require__("./src/storybook/functions/createStoryMetaSettingsDecorator.ts"),dist=__webpack_require__("../../node_modules/@storybook/testing-library/dist/index.mjs"),interactions_utils=__webpack_require__("./src/tests/interactions-utils.ts"),jest_dist=__webpack_require__("../../node_modules/@storybook/jest/dist/index.mjs");const overviewPlaySuite=(0,interactions_utils.Ld)({beforeEach:async canvas=>{const dropdownElement=await(0,interactions_utils.gy)(canvas,"textbox");await dist.Q4.clear(dropdownElement),(0,jest_dist.E)(dropdownElement.value).toEqual(""),await(0,interactions_utils.wQ)(dropdownElement,"{escape}");const optionElement=await canvas.queryByText("Option 1");(0,jest_dist.E)(optionElement).toBeNull()},tests:[async canvas=>{const dropdownElement=await(0,interactions_utils.gy)(canvas,"textbox");await(0,interactions_utils.jp)(dropdownElement),await(0,interactions_utils.wQ)(dropdownElement,"Option");const optionToSelect=(0,interactions_utils.Tf)(canvas,"Option 1");await(0,interactions_utils.jp)(optionToSelect);const clearButton=(0,interactions_utils.Xr)("clear-indicator");await(0,interactions_utils.jp)(clearButton),(0,interactions_utils.Tf)(canvas,"Placeholder text here")},async canvas=>{const dropdownElement=await(0,interactions_utils.gy)(canvas,"textbox");await(0,interactions_utils.jp)(dropdownElement),await(0,interactions_utils.Tf)(canvas,"Option 1"),await(0,interactions_utils.wQ)(dropdownElement,"{escape}");const optionElement=await canvas.queryByText("Option 1");(0,jest_dist.E)(optionElement).toBeNull()}]}),multiInteractionTests=(0,interactions_utils.Ld)({tests:[async canvas=>{const optionElement=await canvas.queryByText("+2");await(0,interactions_utils.jp)(optionElement),await(0,dist.fm)((async()=>{const popover=await(0,interactions_utils.gy)(document.body,"dialog");(0,jest_dist.E)(popover).toBeInTheDocument()}))}]}),person1_namespaceObject=__webpack_require__.p+"static/media/person1.de30c8ee.png",person3_namespaceObject=__webpack_require__.p+"static/media/person3.7ed20eb8.png",person2_namespaceObject=__webpack_require__.p+"static/media/person2.2c51a581.png";var Avatar=__webpack_require__("./src/components/Avatar/Avatar.tsx"),injectStylesIntoStyleTag=__webpack_require__("../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),injectStylesIntoStyleTag_default=__webpack_require__.n(injectStylesIntoStyleTag),styleDomAPI=__webpack_require__("../../node_modules/style-loader/dist/runtime/styleDomAPI.js"),styleDomAPI_default=__webpack_require__.n(styleDomAPI),insertBySelector=__webpack_require__("../../node_modules/style-loader/dist/runtime/insertBySelector.js"),insertBySelector_default=__webpack_require__.n(insertBySelector),setAttributesWithoutAttributes=__webpack_require__("../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),setAttributesWithoutAttributes_default=__webpack_require__.n(setAttributesWithoutAttributes),insertStyleElement=__webpack_require__("../../node_modules/style-loader/dist/runtime/insertStyleElement.js"),insertStyleElement_default=__webpack_require__.n(insertStyleElement),styleTagTransform=__webpack_require__("../../node_modules/style-loader/dist/runtime/styleTagTransform.js"),styleTagTransform_default=__webpack_require__.n(styleTagTransform),Dropdown_stories=__webpack_require__("../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[16].use[1]!../../node_modules/resolve-url-loader/index.js!../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[16].use[3]!./src/components/Dropdown/__stories__/Dropdown.stories.scss"),options={};options.styleTagTransform=styleTagTransform_default(),options.setAttributes=setAttributesWithoutAttributes_default(),options.insert=insertBySelector_default().bind(null,"head"),options.domAPI=styleDomAPI_default(),options.insertStyleElement=insertStyleElement_default();injectStylesIntoStyleTag_default()(Dropdown_stories.A,options);Dropdown_stories.A&&Dropdown_stories.A.locals&&Dropdown_stories.A.locals;var jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");const OptionRenderer=_ref=>{let{src,type,size,name,position}=_ref;return(0,jsx_runtime.jsxs)("div",{className:"dropdown-stories-styles_inline-container",children:[(0,jsx_runtime.jsx)(Avatar.A,{size,src,type},name),(0,jsx_runtime.jsxs)("span",{className:"dropdown-stories-styles_name",children:[name,(0,jsx_runtime.jsx)("span",{children:position})]})]})};OptionRenderer.displayName="OptionRenderer",OptionRenderer.__docgenInfo={description:"",methods:[],displayName:"OptionRenderer"};var Email=__webpack_require__("./src/components/Icon/Icons/components/Email.tsx"),Attach=__webpack_require__("./src/components/Icon/Icons/components/Attach.tsx"),Dropdown=__webpack_require__("./src/components/Dropdown/Dropdown.tsx"),Flex=__webpack_require__("./src/components/Flex/Flex.tsx"),Label=__webpack_require__("./src/components/Label/Label.tsx"),DialogContentContainer=__webpack_require__("./src/components/DialogContentContainer/DialogContentContainer.tsx"),Box=__webpack_require__("./src/components/Box/Box.tsx"),Button=__webpack_require__("./src/components/Button/Button.tsx"),Modal=__webpack_require__("./src/components/Modal/Modal.tsx"),ModalContent=__webpack_require__("./src/components/Modal/ModalContent/ModalContent.tsx"),ModalExampleContent=__webpack_require__("./src/storybook/patterns/dropdown-in-modals/ModalExampleContent.tsx"),Dropdown_stories_helpers=__webpack_require__("./src/components/Dropdown/__stories__/Dropdown.stories.helpers.tsx");const metaSettings=(0,createStoryMetaSettingsDecorator.B)({component:Dropdown.A,enumPropNamesArray:["size","menuPosition","menuPlacement"],actionPropsArray:["onMenuOpen","onMenuClose","onFocus","onBlur","onChange","openMenuOnFocus","onOptionRemove","onOptionSelect","onClear","onInputChange","onKeyDown"]}),Dropdown_stories_Dropdown_stories={parameters:{storySource:{source:'import React, { useCallback, useMemo, useRef, useState } from "react";\nimport { StoryDescription } from "vibe-storybook-components";\nimport { createStoryMetaSettingsDecorator } from "../../../storybook";\nimport { multiInteractionTests, overviewPlaySuite } from "../__tests__/Dropdown.interactions";\nimport person1 from "./assets/person1.png";\nimport person3 from "./assets/person3.png";\nimport person2 from "./assets/person2.png";\nimport { OptionRenderer } from "./OptionRenderer.js";\nimport { Attach, Email } from "../../Icon/Icons";\nimport { Avatar, Box, Button, DialogContentContainer, Dropdown, Flex, Label, Modal, ModalContent } from "../../index";\nimport ModalExampleContent from "../../../storybook/patterns/dropdown-in-modals/ModalExampleContent";\nimport "./Dropdown.stories.scss";\nimport { fakeFetchUsers } from "./Dropdown.stories.helpers";\n\nconst metaSettings = createStoryMetaSettingsDecorator({\n  component: Dropdown,\n  enumPropNamesArray: ["size", "menuPosition", "menuPlacement"],\n  actionPropsArray: [\n    "onMenuOpen",\n    "onMenuClose",\n    "onFocus",\n    "onBlur",\n    "onChange",\n    "openMenuOnFocus",\n    "onOptionRemove",\n    "onOptionSelect",\n    "onClear",\n    "onInputChange",\n    "onKeyDown"\n  ]\n});\n\nexport default {\n  title: "Inputs/Dropdown",\n  component: Dropdown,\n  argTypes: metaSettings.argTypes,\n  decorators: metaSettings.decorators\n};\n\nconst dropdownTemplate = props => {\n  const options = useMemo(\n    () => [\n      { value: 1, label: "Option 1" },\n      { value: 2, label: "Option 2" },\n      { value: 3, label: "Option 3" }\n    ],\n    []\n  );\n  return (\n    <div style={{ height: "150px" }}>\n      <Dropdown options={options} {...props} />\n    </div>\n  );\n};\n\nexport const Overview = {\n  render: dropdownTemplate.bind({}),\n  args: {\n    placeholder: "Placeholder text here",\n    className: "dropdown-stories-styles_spacing"\n  },\n  parameters: {\n    controls: {\n      // TODO: remove exclusion when prop is removed in next major\n      exclude: ["withReadOnlyStyle"]\n    },\n    docs: {\n      liveEdit: {\n        isEnabled: false\n      }\n    }\n  },\n  play: overviewPlaySuite\n};\n\nexport const Sizes = {\n  render: () => (\n    <>\n      <Dropdown placeholder="Small" size={Dropdown.sizes.SMALL} className="dropdown-stories-styles_spacing" />\n      <Dropdown placeholder="Medium" size={Dropdown.sizes.MEDIUM} className="dropdown-stories-styles_spacing" />\n      <Dropdown placeholder="Large" size={Dropdown.sizes.LARGE} className="dropdown-stories-styles_spacing" />\n    </>\n  )\n};\n\nexport const Disabled = {\n  render: () => {\n    const options = useMemo(\n      () => [\n        {\n          value: "1",\n          label: "Option 1"\n        },\n        {\n          value: "2",\n          label: "Option 2"\n        },\n        {\n          value: "3",\n          label: "Option 3"\n        }\n      ],\n      []\n    );\n\n    return (\n      <Flex direction={Flex.directions.ROW}>\n        <Dropdown defaultValue={[options[0]]} options={options} disabled className="dropdown-stories-styles_spacing" />\n        <Dropdown\n          multi\n          defaultValue={[options[0], options[1]]}\n          options={options}\n          disabled\n          className="dropdown-stories-styles_spacing"\n        />\n      </Flex>\n    );\n  }\n};\n\nexport const Readonly = {\n  render: () => {\n    const options = useMemo(\n      () => [\n        {\n          value: "1",\n          label: "Option 1"\n        },\n        {\n          value: "2",\n          label: "Option 2"\n        },\n        {\n          value: "3",\n          label: "Option 3"\n        }\n      ],\n      []\n    );\n\n    return (\n      <Flex direction={Flex.directions.ROW}>\n        <Dropdown defaultValue={[options[0]]} options={options} readOnly className="dropdown-stories-styles_spacing" />\n        <Dropdown\n          multi\n          defaultValue={[options[0], options[1]]}\n          options={options}\n          readOnly\n          className="dropdown-stories-styles_spacing"\n        />\n      </Flex>\n    );\n  }\n};\n\nexport const Rtl = {\n  render: () => (\n    <>\n      <Dropdown placeholder="Left to right (default)" className="dropdown-stories-styles_spacing" />\n      <Dropdown placeholder="מימין לשמאל" className="dropdown-stories-styles_spacing" rtl />\n    </>\n  ),\n  name: "RTL"\n};\n\nexport const MultiChoiceWithDifferentStates = {\n  render: () => {\n    const options = useMemo(\n      () => [\n        {\n          value: "Rotem",\n          label: "Rotem Dekel"\n        },\n        {\n          value: "Hadas",\n          label: "Hadas Farhi"\n        },\n        {\n          value: "Netta",\n          label: "Netta Muller"\n        },\n        {\n          value: "Dor",\n          label: "Dor Yehuda"\n        }\n      ],\n      []\n    );\n\n    return (\n      <Flex wrap gap={Flex.gaps.MEDIUM}>\n        <StoryDescription description="Single line" vertical>\n          <div\n            style={{\n              width: "400px"\n            }}\n          >\n            <Dropdown\n              placeholder="Single line multi state"\n              defaultValue={[options[0]]}\n              options={options}\n              multi\n              className="dropdown-stories-styles_with-chips"\n            />\n          </div>\n        </StoryDescription>\n        <StoryDescription description="Multiple lines" vertical>\n          <div\n            style={{\n              width: "400px"\n            }}\n          >\n            <Dropdown\n              placeholder="Multiple line multi state"\n              defaultValue={[options[0]]}\n              options={options}\n              multi\n              multiline\n              className="dropdown-stories-styles_with-chips"\n            />\n          </div>\n        </StoryDescription>\n        <StoryDescription\n          description="Mandatory default values"\n          vertical\n          headerStyle={{\n            width: 190\n          }}\n        >\n          <div\n            style={{\n              width: "400px"\n            }}\n          >\n            <Dropdown\n              defaultValue={[options[0]]}\n              options={options}\n              multi\n              multiline\n              className="dropdown-stories-styles_with-chips"\n              withMandatoryDefaultOptions\n            />\n          </div>\n        </StoryDescription>\n        <StoryDescription\n          description="Hidden options list"\n          vertical\n          headerStyle={{\n            width: 190\n          }}\n        >\n          <div\n            style={{\n              width: "400px"\n            }}\n          >\n            <Dropdown\n              defaultValue={[...options]}\n              options={options}\n              multi\n              className="dropdown-stories-styles_with-chips"\n            />\n          </div>\n        </StoryDescription>\n      </Flex>\n    );\n  },\n  play: multiInteractionTests,\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { StoryDescription }\n      }\n    }\n  },\n  name: "Multi-choice with different states"\n};\n\nexport const AsyncDropdown = {\n  render: () => {\n    const fetchUserOptions = async () => {\n      try {\n        const response = await fakeFetchUsers();\n        const users = await response.json();\n\n        return users.slice(0, 5).map(user => ({\n          label: user.name,\n          value: user.id\n        }));\n      } catch (error) {\n        console.error("Error fetching user data:", error);\n      }\n      return [];\n    };\n\n    return (\n      <div\n        style={{\n          width: "400px"\n        }}\n      >\n        <Dropdown asyncOptions={fetchUserOptions} placeholder="Async options" cacheOptions defaultOptions />\n      </div>\n    );\n  }\n};\n\nexport const DropdownWithAvatar = {\n  render: () => {\n    const optionsAvatar = useMemo(\n      () => [\n        {\n          value: "Rotem",\n          label: "Rotem Dekel",\n          leftAvatar: person1\n        },\n        {\n          value: "Hadas",\n          label: "Hadas Farhi",\n          leftAvatar: person2\n        },\n        {\n          value: "Netta",\n          label: "Netta Muller",\n          leftAvatar: person3\n        }\n      ],\n      []\n    );\n\n    return (\n      <Flex gap={Flex.gaps.SMALL}>\n        <StoryDescription vertical description="Single value">\n          <div>\n            <Dropdown\n              defaultValue={[optionsAvatar[0]]}\n              options={optionsAvatar}\n              className="dropdown-stories-styles_with-chips"\n            />\n          </div>\n        </StoryDescription>\n        <StoryDescription vertical description="Multiple values">\n          <div>\n            <Dropdown\n              defaultValue={[optionsAvatar[0]]}\n              options={optionsAvatar}\n              multi\n              multiline\n              className="dropdown-stories-styles_with-chips"\n            />\n          </div>\n        </StoryDescription>\n      </Flex>\n    );\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { person1, person2, person3, StoryDescription }\n      }\n    }\n  },\n  name: "Dropdown with avatar"\n};\n\nexport const DropdownWithIcon = {\n  render: () => {\n    const optionsIcons = useMemo(\n      () => [\n        {\n          value: "email",\n          label: "Email",\n          leftIcon: Email\n        },\n        {\n          value: "attach",\n          label: "Attach",\n          leftIcon: Attach\n        }\n      ],\n      []\n    );\n\n    return (\n      <Flex gap={Flex.gaps.SMALL}>\n        <StoryDescription vertical description="Single value">\n          <div>\n            <Dropdown\n              defaultValue={[optionsIcons[0]]}\n              options={optionsIcons}\n              className="dropdown-stories-styles_with-chips"\n            />\n          </div>\n        </StoryDescription>\n        <StoryDescription vertical description="Multiple values">\n          <div>\n            <Dropdown\n              defaultValue={[optionsIcons[0]]}\n              options={optionsIcons}\n              multi\n              multiline\n              className="dropdown-stories-styles_with-chips"\n            />\n          </div>\n        </StoryDescription>\n      </Flex>\n    );\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { Email, Attach, StoryDescription }\n      }\n    }\n  },\n  name: "Dropdown with icon"\n};\n\nexport const DropdownWithChipColors = {\n  render: () => {\n    const optionsWithChipColors = useMemo(\n      () => [\n        {\n          value: "Rotem",\n          label: "Rotem Dekel",\n          chipColor: Dropdown.chipColors.NEGATIVE\n        },\n        {\n          value: "Hadas",\n          label: "Hadas Farhi",\n          chipColor: Dropdown.chipColors.POSITIVE\n        },\n        {\n          value: "Netta",\n          label: "Netta Muller",\n          chipColor: Dropdown.chipColors.PRIMARY\n        }\n      ],\n      []\n    );\n\n    return (\n      <StoryDescription vertical>\n        <div>\n          <Dropdown\n            defaultValue={[optionsWithChipColors[0]]}\n            options={optionsWithChipColors}\n            multi\n            multiline\n            className="dropdown-stories-styles_with-chips"\n          />\n        </div>\n      </StoryDescription>\n    );\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { StoryDescription }\n      }\n    }\n  },\n  name: "Dropdown with chip colors"\n};\n\nexport const DropdownWithTooltipsOnItems = {\n  render: () => {\n    const optionsWithTooltips = useMemo(\n      () => [\n        {\n          value: "Option 1",\n          label: "Option 1",\n\n          tooltipProps: {\n            content: "Description for option 1"\n          }\n        },\n        {\n          value: "Option 2",\n          label: "Option 2",\n\n          tooltipProps: {\n            content: "Description for option 2"\n          }\n        }\n      ],\n      []\n    );\n\n    return (\n      <StoryDescription vertical>\n        <div>\n          <Dropdown\n            placeholder={"Placeholder text here"}\n            options={optionsWithTooltips}\n            className="dropdown-stories-styles_with-chips"\n          />\n        </div>\n      </StoryDescription>\n    );\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { StoryDescription }\n      }\n    }\n  },\n  name: "Dropdown with tooltips on items"\n};\n\nexport const DropdownWithChips = {\n  render: () => {\n    const options = useMemo(\n      () => [\n        {\n          value: "Dor Yehuda",\n          label: "Hadas Farhi",\n          src: person1,\n          type: Avatar.types.IMG,\n          size: Avatar.sizes.SMALL,\n          name: "Dor Yehuda",\n          position: "(Full Stack Developer)"\n        },\n        {\n          value: "No",\n          label: "Rotem Dekel",\n          src: person3,\n          type: Avatar.types.IMG,\n          size: Avatar.sizes.SMALL,\n          name: "Rotem Dekel",\n          position: "(Product Designer)"\n        },\n        {\n          value: "Yes",\n          label: "Netta Muller",\n          src: person2,\n          type: Avatar.types.IMG,\n          size: Avatar.sizes.SMALL,\n          name: "Netta Muller",\n          position: "(Brand Designer)"\n        }\n      ],\n      []\n    );\n\n    return (\n      <Dropdown\n        defaultValue={[options[0]]}\n        options={options}\n        multi\n        placeholder="Dropdown with chips"\n        optionRenderer={OptionRenderer}\n        className="dropdown-stories-styles_with-chips"\n      />\n    );\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { person1, person2, person3, OptionRenderer }\n      }\n    }\n  },\n  name: "Dropdown with chips"\n};\n\nexport const SearchableDropdown = {\n  render: () => {\n    const [searchValue, setSearchValue] = useState("");\n\n    const allOptions = useMemo(\n      () => [\n        {\n          value: "Red",\n          label: "Red"\n        },\n        {\n          value: "Orange",\n          label: "Orange"\n        },\n        {\n          value: "Yellow",\n          label: "Yellow"\n        },\n        {\n          value: "Green",\n          label: "Green"\n        },\n        {\n          value: "Blue",\n          label: "Blue"\n        },\n        {\n          value: "Indigo",\n          label: "Indigo"\n        },\n        {\n          value: "Violet",\n          label: "Violet"\n        }\n      ],\n      []\n    );\n\n    const options = useMemo(() => {\n      if (!searchValue) return allOptions;\n\n      return allOptions.filter(option => option.label.toLowerCase().includes(searchValue.toLowerCase()));\n    }, [allOptions, searchValue]);\n\n    const onInputChange = value => setSearchValue(value);\n\n    return (\n      <Dropdown\n        options={options}\n        multi\n        placeholder="Select colors"\n        className="dropdown-stories-styles_with-chips"\n        onInputChange={onInputChange}\n      />\n    );\n  },\n  name: "Searchable dropdown"\n};\n\nexport const DropdownWithLabels = {\n  render: () => {\n    const labelRenderer = useCallback(({ label, color }) => {\n      return <Label text={label} color={color} isAnimationDisabled />;\n    }, []);\n\n    const options = useMemo(\n      () => [\n        {\n          value: "success",\n          label: "Success",\n          color: Label.colors.POSITIVE\n        },\n        {\n          value: "failed",\n          label: "Failed",\n          color: Label.colors.NEGATIVE\n        },\n        {\n          value: "in progress",\n          label: "In progress"\n        }\n      ],\n      []\n    );\n\n    return (\n      <Dropdown\n        placeholder="Placeholder text here"\n        options={options}\n        defaultValue={[options[0]]}\n        className="dropdown-stories-styles_big-spacing"\n        optionRenderer={labelRenderer}\n        valueRenderer={labelRenderer}\n      />\n    );\n  },\n  name: "Dropdown with labels"\n};\n\nexport const DropdownInsideAForm = {\n  render: () => {\n    const options = useMemo(\n      () => [\n        {\n          value: "Sometimes",\n          label: "Sometimes"\n        },\n        {\n          value: "No",\n          label: "No"\n        },\n        {\n          value: "Yes",\n          label: "Yes"\n        }\n      ],\n      []\n    );\n\n    return (\n      <div>\n        <h5 className="dropdown-stories-styles_title">Are you usually a Dark mode person?</h5>\n        <Dropdown\n          defaultValue={[options[0]]}\n          placeholder="Placeholder text here"\n          options={options}\n          className="dropdown-stories-styles_big-spacing"\n        />\n      </div>\n    );\n  },\n  name: "Dropdown inside a form"\n};\n\nexport const DropdownWithGroups = {\n  render: () => {\n    const options = useMemo(\n      () => [\n        {\n          label: "Group 1",\n\n          options: [\n            {\n              value: "1",\n              label: "Option 1"\n            },\n            {\n              value: "2",\n              label: "Option 2"\n            }\n          ]\n        },\n        {\n          label: "Group 2",\n\n          options: [\n            {\n              value: "3",\n              label: "Option 3"\n            },\n            {\n              value: "4",\n              label: "Option 4"\n            }\n          ]\n        }\n      ],\n      []\n    );\n\n    return (\n      <Dropdown placeholder="Placeholder text here" options={options} className="dropdown-stories-styles_big-spacing" />\n    );\n  },\n  name: "Dropdown with groups"\n};\n\nexport const DropdownInsidePopover = {\n  render: () => {\n    const options = useMemo(\n      () => [\n        {\n          value: "1",\n          label: "Option 1"\n        },\n        {\n          value: "2",\n          label: "Option 2"\n        },\n        {\n          value: "3",\n          label: "Option 3"\n        },\n        {\n          value: "4",\n          label: "Option 4"\n        },\n        {\n          value: "5",\n          label: "Option 5"\n        },\n        {\n          value: "6",\n          label: "Option 6"\n        },\n        {\n          value: "7",\n          label: "Option 7"\n        },\n        {\n          value: "8",\n          label: "Option 8"\n        },\n        {\n          value: "9",\n          label: "Option 9"\n        },\n        {\n          value: "10",\n          label: "Option 10"\n        },\n        {\n          value: "11",\n          label: "Option 11"\n        },\n        {\n          value: "12",\n          label: "Option 12"\n        },\n        {\n          value: "13",\n          label: "Option 13"\n        },\n        {\n          value: "14",\n          label: "Option 14"\n        },\n        {\n          value: "15",\n          label: "Option 15"\n        }\n      ],\n      []\n    );\n\n    const [show, setShow] = useState(false);\n\n    const closeModal = useCallback(() => {\n      setShow(false);\n    }, [setShow]);\n\n    const dialogStyle = {\n      width: "350px",\n      height: "200px",\n      overflow: "auto"\n    };\n\n    return (\n      <Flex gap={Flex.gaps.LARGE}>\n        <DialogContentContainer style={dialogStyle}>\n          <ModalExampleContent />\n          <Box marginTop={Box.marginTops.MEDIUM} marginBottom={Box.marginBottoms.XXL}>\n            <Dropdown\n              placeholder="Dropdown inside DialogContentContainer"\n              options={options}\n              menuPosition={Dropdown.menuPositions.FIXED}\n            />\n          </Box>\n        </DialogContentContainer>\n        <div>\n          <Button onClick={() => setShow(true)}>Open Modal</Button>\n          <Modal title="Modal with dropdown" show={show} onClose={closeModal}>\n            <ModalContent>\n              <Dropdown placeholder="Dropdown" options={options} menuPosition={Dropdown.menuPositions.FIXED} />\n            </ModalContent>\n          </Modal>\n        </div>\n      </Flex>\n    );\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { ModalExampleContent }\n      }\n    }\n  },\n  name: "Dropdown inside popover"\n};\n\nexport const DropdownWithLoading = {\n  render: () => {\n    const [isLoading, setIsLoading] = useState(false);\n\n    const options = useMemo(\n      () => [\n        {\n          value: "1",\n          label: "Option 1"\n        },\n        {\n          value: "2",\n          label: "Option 2"\n        },\n        {\n          value: "3",\n          label: "Option 3"\n        }\n      ],\n      []\n    );\n\n    const loadingOnInputChange = useCallback(() => {\n      setIsLoading(true);\n\n      setTimeout(() => {\n        setIsLoading(false);\n      }, 1000);\n    }, []);\n\n    return (\n      <Dropdown\n        placeholder={"Type to start loading"}\n        options={options}\n        isLoading={isLoading}\n        loadingMessage={() => "Loading options..."}\n        className="dropdown-stories-styles_big-spacing"\n        onInputChange={loadingOnInputChange}\n      />\n    );\n  },\n  name: "Dropdown with loading"\n};\n\nexport const DropdownWithRef = {\n  render: () => {\n    const ref = useRef();\n\n    const options = useMemo(\n      () => [\n        {\n          value: "1",\n          label: "Option 1"\n        },\n        {\n          value: "2",\n          label: "Option 2"\n        },\n        {\n          value: "3",\n          label: "Option 3"\n        }\n      ],\n      []\n    );\n\n    const focusDropdownInput = useCallback(() => {\n      console.log("Dropdown ref.current = ", ref.current);\n      ref.current.select.focus();\n    }, []);\n\n    return (\n      <Flex direction={Flex.directions.ROW}>\n        <Dropdown\n          placeholder="Dropdown with ref"\n          options={options}\n          ref={ref}\n          className="dropdown-stories-styles_spacing"\n        />\n        <Button onClick={focusDropdownInput} className="dropdown-stories-styles_button">\n          Focus dropdown input\n        </Button>\n      </Flex>\n    );\n  },\n  name: "Dropdown with ref"\n};\n\nexport const DropdownValueSelection = {\n  render: () => {\n    const options = useMemo(\n      () => [\n        {\n          value: "1",\n          label: "Option 1"\n        },\n        {\n          value: "2",\n          label: "Option 2"\n        },\n        {\n          value: "3",\n          label: "Option 3"\n        }\n      ],\n      []\n    );\n\n    return (\n      <Flex gap={Flex.gaps.LARGE}>\n        <Dropdown placeholder="Tab selects value" options={options} className="dropdown-stories-styles_big-spacing" />\n        <Dropdown\n          placeholder="Tab does not select value"\n          options={options}\n          tabSelectsValue={false}\n          className="dropdown-stories-styles_big-spacing"\n        />\n      </Flex>\n    );\n  },\n  name: "Dropdown value selection"\n};\n',locationsMap:{overview:{startLoc:{col:24,line:56},endLoc:{col:1,line:74},startBody:{col:24,line:56},endBody:{col:1,line:74}},sizes:{startLoc:{col:21,line:76},endLoc:{col:1,line:84},startBody:{col:21,line:76},endBody:{col:1,line:84}},disabled:{startLoc:{col:24,line:86},endLoc:{col:1,line:119},startBody:{col:24,line:86},endBody:{col:1,line:119}},readonly:{startLoc:{col:24,line:121},endLoc:{col:1,line:154},startBody:{col:24,line:121},endBody:{col:1,line:154}},rtl:{startLoc:{col:19,line:156},endLoc:{col:1,line:164},startBody:{col:19,line:156},endBody:{col:1,line:164}},"multi-choice-with-different-states":{startLoc:{col:46,line:166},endLoc:{col:1,line:277},startBody:{col:46,line:166},endBody:{col:1,line:277}},"async-dropdown":{startLoc:{col:29,line:279},endLoc:{col:1,line:306},startBody:{col:29,line:279},endBody:{col:1,line:306}},"dropdown-with-avatar":{startLoc:{col:34,line:308},endLoc:{col:1,line:364},startBody:{col:34,line:308},endBody:{col:1,line:364}},"dropdown-with-icon":{startLoc:{col:32,line:366},endLoc:{col:1,line:417},startBody:{col:32,line:366},endBody:{col:1,line:417}},"dropdown-with-chip-colors":{startLoc:{col:38,line:419},endLoc:{col:1,line:464},startBody:{col:38,line:419},endBody:{col:1,line:464}},"dropdown-with-tooltips-on-items":{startLoc:{col:43,line:466},endLoc:{col:1,line:510},startBody:{col:43,line:466},endBody:{col:1,line:510}},"dropdown-with-chips":{startLoc:{col:33,line:512},endLoc:{col:1,line:566},startBody:{col:33,line:512},endBody:{col:1,line:566}},"searchable-dropdown":{startLoc:{col:34,line:568},endLoc:{col:1,line:625},startBody:{col:34,line:568},endBody:{col:1,line:625}},"dropdown-with-labels":{startLoc:{col:34,line:627},endLoc:{col:1,line:665},startBody:{col:34,line:627},endBody:{col:1,line:665}},"dropdown-inside-a-form":{startLoc:{col:35,line:667},endLoc:{col:1,line:700},startBody:{col:35,line:667},endBody:{col:1,line:700}},"dropdown-with-groups":{startLoc:{col:34,line:702},endLoc:{col:1,line:743},startBody:{col:34,line:702},endBody:{col:1,line:743}},"dropdown-inside-popover":{startLoc:{col:37,line:745},endLoc:{col:1,line:856},startBody:{col:37,line:745},endBody:{col:1,line:856}},"dropdown-with-loading":{startLoc:{col:35,line:858},endLoc:{col:1,line:900},startBody:{col:35,line:858},endBody:{col:1,line:900}},"dropdown-with-ref":{startLoc:{col:31,line:902},endLoc:{col:1,line:944},startBody:{col:31,line:902},endBody:{col:1,line:944}},"dropdown-value-selection":{startLoc:{col:38,line:946},endLoc:{col:1,line:979},startBody:{col:38,line:946},endBody:{col:1,line:979}}}}},title:"Inputs/Dropdown",component:Dropdown.A,argTypes:metaSettings.argTypes,decorators:metaSettings.decorators},dropdownTemplate=props=>{const options=(0,react.useMemo)((()=>[{value:1,label:"Option 1"},{value:2,label:"Option 2"},{value:3,label:"Option 3"}]),[]);return(0,jsx_runtime.jsx)("div",{style:{height:"150px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{options,...props})})};dropdownTemplate.displayName="dropdownTemplate";const Overview={render:dropdownTemplate.bind({}),args:{placeholder:"Placeholder text here",className:"dropdown-stories-styles_spacing"},parameters:{controls:{exclude:["withReadOnlyStyle"]},docs:{liveEdit:{isEnabled:!1}}},play:overviewPlaySuite},Sizes={render:()=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Small",size:Dropdown.A.sizes.SMALL,className:"dropdown-stories-styles_spacing"}),(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Medium",size:Dropdown.A.sizes.MEDIUM,className:"dropdown-stories-styles_spacing"}),(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Large",size:Dropdown.A.sizes.LARGE,className:"dropdown-stories-styles_spacing"})]})},Disabled={render:()=>{const options=(0,react.useMemo)((()=>[{value:"1",label:"Option 1"},{value:"2",label:"Option 2"},{value:"3",label:"Option 3"}]),[]);return(0,jsx_runtime.jsxs)(Flex.A,{direction:Flex.A.directions.ROW,children:[(0,jsx_runtime.jsx)(Dropdown.A,{defaultValue:[options[0]],options,disabled:!0,className:"dropdown-stories-styles_spacing"}),(0,jsx_runtime.jsx)(Dropdown.A,{multi:!0,defaultValue:[options[0],options[1]],options,disabled:!0,className:"dropdown-stories-styles_spacing"})]})}},Readonly={render:()=>{const options=(0,react.useMemo)((()=>[{value:"1",label:"Option 1"},{value:"2",label:"Option 2"},{value:"3",label:"Option 3"}]),[]);return(0,jsx_runtime.jsxs)(Flex.A,{direction:Flex.A.directions.ROW,children:[(0,jsx_runtime.jsx)(Dropdown.A,{defaultValue:[options[0]],options,readOnly:!0,className:"dropdown-stories-styles_spacing"}),(0,jsx_runtime.jsx)(Dropdown.A,{multi:!0,defaultValue:[options[0],options[1]],options,readOnly:!0,className:"dropdown-stories-styles_spacing"})]})}},Rtl={render:()=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Left to right (default)",className:"dropdown-stories-styles_spacing"}),(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"מימין לשמאל",className:"dropdown-stories-styles_spacing",rtl:!0})]}),name:"RTL"},MultiChoiceWithDifferentStates={render:()=>{const options=(0,react.useMemo)((()=>[{value:"Rotem",label:"Rotem Dekel"},{value:"Hadas",label:"Hadas Farhi"},{value:"Netta",label:"Netta Muller"},{value:"Dor",label:"Dor Yehuda"}]),[]);return(0,jsx_runtime.jsxs)(Flex.A,{wrap:!0,gap:Flex.A.gaps.MEDIUM,children:[(0,jsx_runtime.jsx)(story_description.A,{description:"Single line",vertical:!0,children:(0,jsx_runtime.jsx)("div",{style:{width:"400px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Single line multi state",defaultValue:[options[0]],options,multi:!0,className:"dropdown-stories-styles_with-chips"})})}),(0,jsx_runtime.jsx)(story_description.A,{description:"Multiple lines",vertical:!0,children:(0,jsx_runtime.jsx)("div",{style:{width:"400px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Multiple line multi state",defaultValue:[options[0]],options,multi:!0,multiline:!0,className:"dropdown-stories-styles_with-chips"})})}),(0,jsx_runtime.jsx)(story_description.A,{description:"Mandatory default values",vertical:!0,headerStyle:{width:190},children:(0,jsx_runtime.jsx)("div",{style:{width:"400px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{defaultValue:[options[0]],options,multi:!0,multiline:!0,className:"dropdown-stories-styles_with-chips",withMandatoryDefaultOptions:!0})})}),(0,jsx_runtime.jsx)(story_description.A,{description:"Hidden options list",vertical:!0,headerStyle:{width:190},children:(0,jsx_runtime.jsx)("div",{style:{width:"400px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{defaultValue:[...options],options,multi:!0,className:"dropdown-stories-styles_with-chips"})})})]})},play:multiInteractionTests,parameters:{docs:{liveEdit:{scope:{StoryDescription:story_description.A}}}},name:"Multi-choice with different states"},AsyncDropdown={render:()=>(0,jsx_runtime.jsx)("div",{style:{width:"400px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{asyncOptions:async()=>{try{const response=await(0,Dropdown_stories_helpers.Y)();return(await response.json()).slice(0,5).map((user=>({label:user.name,value:user.id})))}catch(error){console.error("Error fetching user data:",error)}return[]},placeholder:"Async options",cacheOptions:!0,defaultOptions:!0})})},DropdownWithAvatar={render:()=>{const optionsAvatar=(0,react.useMemo)((()=>[{value:"Rotem",label:"Rotem Dekel",leftAvatar:person1_namespaceObject},{value:"Hadas",label:"Hadas Farhi",leftAvatar:person2_namespaceObject},{value:"Netta",label:"Netta Muller",leftAvatar:person3_namespaceObject}]),[]);return(0,jsx_runtime.jsxs)(Flex.A,{gap:Flex.A.gaps.SMALL,children:[(0,jsx_runtime.jsx)(story_description.A,{vertical:!0,description:"Single value",children:(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsx)(Dropdown.A,{defaultValue:[optionsAvatar[0]],options:optionsAvatar,className:"dropdown-stories-styles_with-chips"})})}),(0,jsx_runtime.jsx)(story_description.A,{vertical:!0,description:"Multiple values",children:(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsx)(Dropdown.A,{defaultValue:[optionsAvatar[0]],options:optionsAvatar,multi:!0,multiline:!0,className:"dropdown-stories-styles_with-chips"})})})]})},parameters:{docs:{liveEdit:{scope:{person1:person1_namespaceObject,person2:person2_namespaceObject,person3:person3_namespaceObject,StoryDescription:story_description.A}}}},name:"Dropdown with avatar"},DropdownWithIcon={render:()=>{const optionsIcons=(0,react.useMemo)((()=>[{value:"email",label:"Email",leftIcon:Email.A},{value:"attach",label:"Attach",leftIcon:Attach.A}]),[]);return(0,jsx_runtime.jsxs)(Flex.A,{gap:Flex.A.gaps.SMALL,children:[(0,jsx_runtime.jsx)(story_description.A,{vertical:!0,description:"Single value",children:(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsx)(Dropdown.A,{defaultValue:[optionsIcons[0]],options:optionsIcons,className:"dropdown-stories-styles_with-chips"})})}),(0,jsx_runtime.jsx)(story_description.A,{vertical:!0,description:"Multiple values",children:(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsx)(Dropdown.A,{defaultValue:[optionsIcons[0]],options:optionsIcons,multi:!0,multiline:!0,className:"dropdown-stories-styles_with-chips"})})})]})},parameters:{docs:{liveEdit:{scope:{Email:Email.A,Attach:Attach.A,StoryDescription:story_description.A}}}},name:"Dropdown with icon"},DropdownWithChipColors={render:()=>{const optionsWithChipColors=(0,react.useMemo)((()=>[{value:"Rotem",label:"Rotem Dekel",chipColor:Dropdown.A.chipColors.NEGATIVE},{value:"Hadas",label:"Hadas Farhi",chipColor:Dropdown.A.chipColors.POSITIVE},{value:"Netta",label:"Netta Muller",chipColor:Dropdown.A.chipColors.PRIMARY}]),[]);return(0,jsx_runtime.jsx)(story_description.A,{vertical:!0,children:(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsx)(Dropdown.A,{defaultValue:[optionsWithChipColors[0]],options:optionsWithChipColors,multi:!0,multiline:!0,className:"dropdown-stories-styles_with-chips"})})})},parameters:{docs:{liveEdit:{scope:{StoryDescription:story_description.A}}}},name:"Dropdown with chip colors"},DropdownWithTooltipsOnItems={render:()=>{const optionsWithTooltips=(0,react.useMemo)((()=>[{value:"Option 1",label:"Option 1",tooltipProps:{content:"Description for option 1"}},{value:"Option 2",label:"Option 2",tooltipProps:{content:"Description for option 2"}}]),[]);return(0,jsx_runtime.jsx)(story_description.A,{vertical:!0,children:(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Placeholder text here",options:optionsWithTooltips,className:"dropdown-stories-styles_with-chips"})})})},parameters:{docs:{liveEdit:{scope:{StoryDescription:story_description.A}}}},name:"Dropdown with tooltips on items"},DropdownWithChips={render:()=>{const options=(0,react.useMemo)((()=>[{value:"Dor Yehuda",label:"Hadas Farhi",src:person1_namespaceObject,type:Avatar.A.types.IMG,size:Avatar.A.sizes.SMALL,name:"Dor Yehuda",position:"(Full Stack Developer)"},{value:"No",label:"Rotem Dekel",src:person3_namespaceObject,type:Avatar.A.types.IMG,size:Avatar.A.sizes.SMALL,name:"Rotem Dekel",position:"(Product Designer)"},{value:"Yes",label:"Netta Muller",src:person2_namespaceObject,type:Avatar.A.types.IMG,size:Avatar.A.sizes.SMALL,name:"Netta Muller",position:"(Brand Designer)"}]),[]);return(0,jsx_runtime.jsx)(Dropdown.A,{defaultValue:[options[0]],options,multi:!0,placeholder:"Dropdown with chips",optionRenderer:OptionRenderer,className:"dropdown-stories-styles_with-chips"})},parameters:{docs:{liveEdit:{scope:{person1:person1_namespaceObject,person2:person2_namespaceObject,person3:person3_namespaceObject,OptionRenderer}}}},name:"Dropdown with chips"},SearchableDropdown={render:()=>{const[searchValue,setSearchValue]=(0,react.useState)(""),allOptions=(0,react.useMemo)((()=>[{value:"Red",label:"Red"},{value:"Orange",label:"Orange"},{value:"Yellow",label:"Yellow"},{value:"Green",label:"Green"},{value:"Blue",label:"Blue"},{value:"Indigo",label:"Indigo"},{value:"Violet",label:"Violet"}]),[]),options=(0,react.useMemo)((()=>searchValue?allOptions.filter((option=>option.label.toLowerCase().includes(searchValue.toLowerCase()))):allOptions),[allOptions,searchValue]);return(0,jsx_runtime.jsx)(Dropdown.A,{options,multi:!0,placeholder:"Select colors",className:"dropdown-stories-styles_with-chips",onInputChange:value=>setSearchValue(value)})},name:"Searchable dropdown"},DropdownWithLabels={render:()=>{const labelRenderer=(0,react.useCallback)((_ref=>{let{label,color}=_ref;return(0,jsx_runtime.jsx)(Label.A,{text:label,color,isAnimationDisabled:!0})}),[]),options=(0,react.useMemo)((()=>[{value:"success",label:"Success",color:Label.A.colors.POSITIVE},{value:"failed",label:"Failed",color:Label.A.colors.NEGATIVE},{value:"in progress",label:"In progress"}]),[]);return(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Placeholder text here",options,defaultValue:[options[0]],className:"dropdown-stories-styles_big-spacing",optionRenderer:labelRenderer,valueRenderer:labelRenderer})},name:"Dropdown with labels"},DropdownInsideAForm={render:()=>{const options=(0,react.useMemo)((()=>[{value:"Sometimes",label:"Sometimes"},{value:"No",label:"No"},{value:"Yes",label:"Yes"}]),[]);return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("h5",{className:"dropdown-stories-styles_title",children:"Are you usually a Dark mode person?"}),(0,jsx_runtime.jsx)(Dropdown.A,{defaultValue:[options[0]],placeholder:"Placeholder text here",options,className:"dropdown-stories-styles_big-spacing"})]})},name:"Dropdown inside a form"},DropdownWithGroups={render:()=>{const options=(0,react.useMemo)((()=>[{label:"Group 1",options:[{value:"1",label:"Option 1"},{value:"2",label:"Option 2"}]},{label:"Group 2",options:[{value:"3",label:"Option 3"},{value:"4",label:"Option 4"}]}]),[]);return(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Placeholder text here",options,className:"dropdown-stories-styles_big-spacing"})},name:"Dropdown with groups"},DropdownInsidePopover={render:()=>{const options=(0,react.useMemo)((()=>[{value:"1",label:"Option 1"},{value:"2",label:"Option 2"},{value:"3",label:"Option 3"},{value:"4",label:"Option 4"},{value:"5",label:"Option 5"},{value:"6",label:"Option 6"},{value:"7",label:"Option 7"},{value:"8",label:"Option 8"},{value:"9",label:"Option 9"},{value:"10",label:"Option 10"},{value:"11",label:"Option 11"},{value:"12",label:"Option 12"},{value:"13",label:"Option 13"},{value:"14",label:"Option 14"},{value:"15",label:"Option 15"}]),[]),[show,setShow]=(0,react.useState)(!1),closeModal=(0,react.useCallback)((()=>{setShow(!1)}),[setShow]);return(0,jsx_runtime.jsxs)(Flex.A,{gap:Flex.A.gaps.LARGE,children:[(0,jsx_runtime.jsxs)(DialogContentContainer.A,{style:{width:"350px",height:"200px",overflow:"auto"},children:[(0,jsx_runtime.jsx)(ModalExampleContent.A,{}),(0,jsx_runtime.jsx)(Box.A,{marginTop:Box.A.marginTops.MEDIUM,marginBottom:Box.A.marginBottoms.XXL,children:(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Dropdown inside DialogContentContainer",options,menuPosition:Dropdown.A.menuPositions.FIXED})})]}),(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(Button.A,{onClick:()=>setShow(!0),children:"Open Modal"}),(0,jsx_runtime.jsx)(Modal.A,{title:"Modal with dropdown",show,onClose:closeModal,children:(0,jsx_runtime.jsx)(ModalContent.A,{children:(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Dropdown",options,menuPosition:Dropdown.A.menuPositions.FIXED})})})]})]})},parameters:{docs:{liveEdit:{scope:{ModalExampleContent:ModalExampleContent.A}}}},name:"Dropdown inside popover"},DropdownWithLoading={render:()=>{const[isLoading,setIsLoading]=(0,react.useState)(!1),options=(0,react.useMemo)((()=>[{value:"1",label:"Option 1"},{value:"2",label:"Option 2"},{value:"3",label:"Option 3"}]),[]),loadingOnInputChange=(0,react.useCallback)((()=>{setIsLoading(!0),setTimeout((()=>{setIsLoading(!1)}),1e3)}),[]);return(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Type to start loading",options,isLoading,loadingMessage:()=>"Loading options...",className:"dropdown-stories-styles_big-spacing",onInputChange:loadingOnInputChange})},name:"Dropdown with loading"},DropdownWithRef={render:()=>{const ref=(0,react.useRef)(),options=(0,react.useMemo)((()=>[{value:"1",label:"Option 1"},{value:"2",label:"Option 2"},{value:"3",label:"Option 3"}]),[]),focusDropdownInput=(0,react.useCallback)((()=>{console.log("Dropdown ref.current = ",ref.current),ref.current.select.focus()}),[]);return(0,jsx_runtime.jsxs)(Flex.A,{direction:Flex.A.directions.ROW,children:[(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Dropdown with ref",options,ref,className:"dropdown-stories-styles_spacing"}),(0,jsx_runtime.jsx)(Button.A,{onClick:focusDropdownInput,className:"dropdown-stories-styles_button",children:"Focus dropdown input"})]})},name:"Dropdown with ref"},DropdownValueSelection={render:()=>{const options=(0,react.useMemo)((()=>[{value:"1",label:"Option 1"},{value:"2",label:"Option 2"},{value:"3",label:"Option 3"}]),[]);return(0,jsx_runtime.jsxs)(Flex.A,{gap:Flex.A.gaps.LARGE,children:[(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Tab selects value",options,className:"dropdown-stories-styles_big-spacing"}),(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Tab does not select value",options,tabSelectsValue:!1,className:"dropdown-stories-styles_big-spacing"})]})},name:"Dropdown value selection"};Overview.parameters={...Overview.parameters,docs:{...Overview.parameters?.docs,source:{originalSource:'{\n  render: dropdownTemplate.bind({}),\n  args: {\n    placeholder: "Placeholder text here",\n    className: "dropdown-stories-styles_spacing"\n  },\n  parameters: {\n    controls: {\n      // TODO: remove exclusion when prop is removed in next major\n      exclude: ["withReadOnlyStyle"]\n    },\n    docs: {\n      liveEdit: {\n        isEnabled: false\n      }\n    }\n  },\n  play: overviewPlaySuite\n}',...Overview.parameters?.docs?.source}}},Sizes.parameters={...Sizes.parameters,docs:{...Sizes.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <Dropdown placeholder="Small" size={Dropdown.sizes.SMALL} className="dropdown-stories-styles_spacing" />\n      <Dropdown placeholder="Medium" size={Dropdown.sizes.MEDIUM} className="dropdown-stories-styles_spacing" />\n      <Dropdown placeholder="Large" size={Dropdown.sizes.LARGE} className="dropdown-stories-styles_spacing" />\n    </>\n}',...Sizes.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => [{\n      value: "1",\n      label: "Option 1"\n    }, {\n      value: "2",\n      label: "Option 2"\n    }, {\n      value: "3",\n      label: "Option 3"\n    }], []);\n    return <Flex direction={Flex.directions.ROW}>\n        <Dropdown defaultValue={[options[0]]} options={options} disabled className="dropdown-stories-styles_spacing" />\n        <Dropdown multi defaultValue={[options[0], options[1]]} options={options} disabled className="dropdown-stories-styles_spacing" />\n      </Flex>;\n  }\n}',...Disabled.parameters?.docs?.source}}},Readonly.parameters={...Readonly.parameters,docs:{...Readonly.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => [{\n      value: "1",\n      label: "Option 1"\n    }, {\n      value: "2",\n      label: "Option 2"\n    }, {\n      value: "3",\n      label: "Option 3"\n    }], []);\n    return <Flex direction={Flex.directions.ROW}>\n        <Dropdown defaultValue={[options[0]]} options={options} readOnly className="dropdown-stories-styles_spacing" />\n        <Dropdown multi defaultValue={[options[0], options[1]]} options={options} readOnly className="dropdown-stories-styles_spacing" />\n      </Flex>;\n  }\n}',...Readonly.parameters?.docs?.source}}},Rtl.parameters={...Rtl.parameters,docs:{...Rtl.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <Dropdown placeholder="Left to right (default)" className="dropdown-stories-styles_spacing" />\n      <Dropdown placeholder="מימין לשמאל" className="dropdown-stories-styles_spacing" rtl />\n    </>,\n  name: "RTL"\n}',...Rtl.parameters?.docs?.source}}},MultiChoiceWithDifferentStates.parameters={...MultiChoiceWithDifferentStates.parameters,docs:{...MultiChoiceWithDifferentStates.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => [{\n      value: "Rotem",\n      label: "Rotem Dekel"\n    }, {\n      value: "Hadas",\n      label: "Hadas Farhi"\n    }, {\n      value: "Netta",\n      label: "Netta Muller"\n    }, {\n      value: "Dor",\n      label: "Dor Yehuda"\n    }], []);\n    return <Flex wrap gap={Flex.gaps.MEDIUM}>\n        <StoryDescription description="Single line" vertical>\n          <div style={{\n          width: "400px"\n        }}>\n            <Dropdown placeholder="Single line multi state" defaultValue={[options[0]]} options={options} multi className="dropdown-stories-styles_with-chips" />\n          </div>\n        </StoryDescription>\n        <StoryDescription description="Multiple lines" vertical>\n          <div style={{\n          width: "400px"\n        }}>\n            <Dropdown placeholder="Multiple line multi state" defaultValue={[options[0]]} options={options} multi multiline className="dropdown-stories-styles_with-chips" />\n          </div>\n        </StoryDescription>\n        <StoryDescription description="Mandatory default values" vertical headerStyle={{\n        width: 190\n      }}>\n          <div style={{\n          width: "400px"\n        }}>\n            <Dropdown defaultValue={[options[0]]} options={options} multi multiline className="dropdown-stories-styles_with-chips" withMandatoryDefaultOptions />\n          </div>\n        </StoryDescription>\n        <StoryDescription description="Hidden options list" vertical headerStyle={{\n        width: 190\n      }}>\n          <div style={{\n          width: "400px"\n        }}>\n            <Dropdown defaultValue={[...options]} options={options} multi className="dropdown-stories-styles_with-chips" />\n          </div>\n        </StoryDescription>\n      </Flex>;\n  },\n  play: multiInteractionTests,\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          StoryDescription\n        }\n      }\n    }\n  },\n  name: "Multi-choice with different states"\n}',...MultiChoiceWithDifferentStates.parameters?.docs?.source}}},AsyncDropdown.parameters={...AsyncDropdown.parameters,docs:{...AsyncDropdown.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const fetchUserOptions = async () => {\n      try {\n        const response = await fakeFetchUsers();\n        const users = await response.json();\n        return users.slice(0, 5).map(user => ({\n          label: user.name,\n          value: user.id\n        }));\n      } catch (error) {\n        console.error("Error fetching user data:", error);\n      }\n      return [];\n    };\n    return <div style={{\n      width: "400px"\n    }}>\n        <Dropdown asyncOptions={fetchUserOptions} placeholder="Async options" cacheOptions defaultOptions />\n      </div>;\n  }\n}',...AsyncDropdown.parameters?.docs?.source}}},DropdownWithAvatar.parameters={...DropdownWithAvatar.parameters,docs:{...DropdownWithAvatar.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const optionsAvatar = useMemo(() => [{\n      value: "Rotem",\n      label: "Rotem Dekel",\n      leftAvatar: person1\n    }, {\n      value: "Hadas",\n      label: "Hadas Farhi",\n      leftAvatar: person2\n    }, {\n      value: "Netta",\n      label: "Netta Muller",\n      leftAvatar: person3\n    }], []);\n    return <Flex gap={Flex.gaps.SMALL}>\n        <StoryDescription vertical description="Single value">\n          <div>\n            <Dropdown defaultValue={[optionsAvatar[0]]} options={optionsAvatar} className="dropdown-stories-styles_with-chips" />\n          </div>\n        </StoryDescription>\n        <StoryDescription vertical description="Multiple values">\n          <div>\n            <Dropdown defaultValue={[optionsAvatar[0]]} options={optionsAvatar} multi multiline className="dropdown-stories-styles_with-chips" />\n          </div>\n        </StoryDescription>\n      </Flex>;\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          person1,\n          person2,\n          person3,\n          StoryDescription\n        }\n      }\n    }\n  },\n  name: "Dropdown with avatar"\n}',...DropdownWithAvatar.parameters?.docs?.source}}},DropdownWithIcon.parameters={...DropdownWithIcon.parameters,docs:{...DropdownWithIcon.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const optionsIcons = useMemo(() => [{\n      value: "email",\n      label: "Email",\n      leftIcon: Email\n    }, {\n      value: "attach",\n      label: "Attach",\n      leftIcon: Attach\n    }], []);\n    return <Flex gap={Flex.gaps.SMALL}>\n        <StoryDescription vertical description="Single value">\n          <div>\n            <Dropdown defaultValue={[optionsIcons[0]]} options={optionsIcons} className="dropdown-stories-styles_with-chips" />\n          </div>\n        </StoryDescription>\n        <StoryDescription vertical description="Multiple values">\n          <div>\n            <Dropdown defaultValue={[optionsIcons[0]]} options={optionsIcons} multi multiline className="dropdown-stories-styles_with-chips" />\n          </div>\n        </StoryDescription>\n      </Flex>;\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          Email,\n          Attach,\n          StoryDescription\n        }\n      }\n    }\n  },\n  name: "Dropdown with icon"\n}',...DropdownWithIcon.parameters?.docs?.source}}},DropdownWithChipColors.parameters={...DropdownWithChipColors.parameters,docs:{...DropdownWithChipColors.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const optionsWithChipColors = useMemo(() => [{\n      value: "Rotem",\n      label: "Rotem Dekel",\n      chipColor: Dropdown.chipColors.NEGATIVE\n    }, {\n      value: "Hadas",\n      label: "Hadas Farhi",\n      chipColor: Dropdown.chipColors.POSITIVE\n    }, {\n      value: "Netta",\n      label: "Netta Muller",\n      chipColor: Dropdown.chipColors.PRIMARY\n    }], []);\n    return <StoryDescription vertical>\n        <div>\n          <Dropdown defaultValue={[optionsWithChipColors[0]]} options={optionsWithChipColors} multi multiline className="dropdown-stories-styles_with-chips" />\n        </div>\n      </StoryDescription>;\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          StoryDescription\n        }\n      }\n    }\n  },\n  name: "Dropdown with chip colors"\n}',...DropdownWithChipColors.parameters?.docs?.source}}},DropdownWithTooltipsOnItems.parameters={...DropdownWithTooltipsOnItems.parameters,docs:{...DropdownWithTooltipsOnItems.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const optionsWithTooltips = useMemo(() => [{\n      value: "Option 1",\n      label: "Option 1",\n      tooltipProps: {\n        content: "Description for option 1"\n      }\n    }, {\n      value: "Option 2",\n      label: "Option 2",\n      tooltipProps: {\n        content: "Description for option 2"\n      }\n    }], []);\n    return <StoryDescription vertical>\n        <div>\n          <Dropdown placeholder={"Placeholder text here"} options={optionsWithTooltips} className="dropdown-stories-styles_with-chips" />\n        </div>\n      </StoryDescription>;\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          StoryDescription\n        }\n      }\n    }\n  },\n  name: "Dropdown with tooltips on items"\n}',...DropdownWithTooltipsOnItems.parameters?.docs?.source}}},DropdownWithChips.parameters={...DropdownWithChips.parameters,docs:{...DropdownWithChips.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => [{\n      value: "Dor Yehuda",\n      label: "Hadas Farhi",\n      src: person1,\n      type: Avatar.types.IMG,\n      size: Avatar.sizes.SMALL,\n      name: "Dor Yehuda",\n      position: "(Full Stack Developer)"\n    }, {\n      value: "No",\n      label: "Rotem Dekel",\n      src: person3,\n      type: Avatar.types.IMG,\n      size: Avatar.sizes.SMALL,\n      name: "Rotem Dekel",\n      position: "(Product Designer)"\n    }, {\n      value: "Yes",\n      label: "Netta Muller",\n      src: person2,\n      type: Avatar.types.IMG,\n      size: Avatar.sizes.SMALL,\n      name: "Netta Muller",\n      position: "(Brand Designer)"\n    }], []);\n    return <Dropdown defaultValue={[options[0]]} options={options} multi placeholder="Dropdown with chips" optionRenderer={OptionRenderer} className="dropdown-stories-styles_with-chips" />;\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          person1,\n          person2,\n          person3,\n          OptionRenderer\n        }\n      }\n    }\n  },\n  name: "Dropdown with chips"\n}',...DropdownWithChips.parameters?.docs?.source}}},SearchableDropdown.parameters={...SearchableDropdown.parameters,docs:{...SearchableDropdown.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [searchValue, setSearchValue] = useState("");\n    const allOptions = useMemo(() => [{\n      value: "Red",\n      label: "Red"\n    }, {\n      value: "Orange",\n      label: "Orange"\n    }, {\n      value: "Yellow",\n      label: "Yellow"\n    }, {\n      value: "Green",\n      label: "Green"\n    }, {\n      value: "Blue",\n      label: "Blue"\n    }, {\n      value: "Indigo",\n      label: "Indigo"\n    }, {\n      value: "Violet",\n      label: "Violet"\n    }], []);\n    const options = useMemo(() => {\n      if (!searchValue) return allOptions;\n      return allOptions.filter(option => option.label.toLowerCase().includes(searchValue.toLowerCase()));\n    }, [allOptions, searchValue]);\n    const onInputChange = value => setSearchValue(value);\n    return <Dropdown options={options} multi placeholder="Select colors" className="dropdown-stories-styles_with-chips" onInputChange={onInputChange} />;\n  },\n  name: "Searchable dropdown"\n}',...SearchableDropdown.parameters?.docs?.source}}},DropdownWithLabels.parameters={...DropdownWithLabels.parameters,docs:{...DropdownWithLabels.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const labelRenderer = useCallback(({\n      label,\n      color\n    }) => {\n      return <Label text={label} color={color} isAnimationDisabled />;\n    }, []);\n    const options = useMemo(() => [{\n      value: "success",\n      label: "Success",\n      color: Label.colors.POSITIVE\n    }, {\n      value: "failed",\n      label: "Failed",\n      color: Label.colors.NEGATIVE\n    }, {\n      value: "in progress",\n      label: "In progress"\n    }], []);\n    return <Dropdown placeholder="Placeholder text here" options={options} defaultValue={[options[0]]} className="dropdown-stories-styles_big-spacing" optionRenderer={labelRenderer} valueRenderer={labelRenderer} />;\n  },\n  name: "Dropdown with labels"\n}',...DropdownWithLabels.parameters?.docs?.source}}},DropdownInsideAForm.parameters={...DropdownInsideAForm.parameters,docs:{...DropdownInsideAForm.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => [{\n      value: "Sometimes",\n      label: "Sometimes"\n    }, {\n      value: "No",\n      label: "No"\n    }, {\n      value: "Yes",\n      label: "Yes"\n    }], []);\n    return <div>\n        <h5 className="dropdown-stories-styles_title">Are you usually a Dark mode person?</h5>\n        <Dropdown defaultValue={[options[0]]} placeholder="Placeholder text here" options={options} className="dropdown-stories-styles_big-spacing" />\n      </div>;\n  },\n  name: "Dropdown inside a form"\n}',...DropdownInsideAForm.parameters?.docs?.source}}},DropdownWithGroups.parameters={...DropdownWithGroups.parameters,docs:{...DropdownWithGroups.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => [{\n      label: "Group 1",\n      options: [{\n        value: "1",\n        label: "Option 1"\n      }, {\n        value: "2",\n        label: "Option 2"\n      }]\n    }, {\n      label: "Group 2",\n      options: [{\n        value: "3",\n        label: "Option 3"\n      }, {\n        value: "4",\n        label: "Option 4"\n      }]\n    }], []);\n    return <Dropdown placeholder="Placeholder text here" options={options} className="dropdown-stories-styles_big-spacing" />;\n  },\n  name: "Dropdown with groups"\n}',...DropdownWithGroups.parameters?.docs?.source}}},DropdownInsidePopover.parameters={...DropdownInsidePopover.parameters,docs:{...DropdownInsidePopover.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => [{\n      value: "1",\n      label: "Option 1"\n    }, {\n      value: "2",\n      label: "Option 2"\n    }, {\n      value: "3",\n      label: "Option 3"\n    }, {\n      value: "4",\n      label: "Option 4"\n    }, {\n      value: "5",\n      label: "Option 5"\n    }, {\n      value: "6",\n      label: "Option 6"\n    }, {\n      value: "7",\n      label: "Option 7"\n    }, {\n      value: "8",\n      label: "Option 8"\n    }, {\n      value: "9",\n      label: "Option 9"\n    }, {\n      value: "10",\n      label: "Option 10"\n    }, {\n      value: "11",\n      label: "Option 11"\n    }, {\n      value: "12",\n      label: "Option 12"\n    }, {\n      value: "13",\n      label: "Option 13"\n    }, {\n      value: "14",\n      label: "Option 14"\n    }, {\n      value: "15",\n      label: "Option 15"\n    }], []);\n    const [show, setShow] = useState(false);\n    const closeModal = useCallback(() => {\n      setShow(false);\n    }, [setShow]);\n    const dialogStyle = {\n      width: "350px",\n      height: "200px",\n      overflow: "auto"\n    };\n    return <Flex gap={Flex.gaps.LARGE}>\n        <DialogContentContainer style={dialogStyle}>\n          <ModalExampleContent />\n          <Box marginTop={Box.marginTops.MEDIUM} marginBottom={Box.marginBottoms.XXL}>\n            <Dropdown placeholder="Dropdown inside DialogContentContainer" options={options} menuPosition={Dropdown.menuPositions.FIXED} />\n          </Box>\n        </DialogContentContainer>\n        <div>\n          <Button onClick={() => setShow(true)}>Open Modal</Button>\n          <Modal title="Modal with dropdown" show={show} onClose={closeModal}>\n            <ModalContent>\n              <Dropdown placeholder="Dropdown" options={options} menuPosition={Dropdown.menuPositions.FIXED} />\n            </ModalContent>\n          </Modal>\n        </div>\n      </Flex>;\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          ModalExampleContent\n        }\n      }\n    }\n  },\n  name: "Dropdown inside popover"\n}',...DropdownInsidePopover.parameters?.docs?.source}}},DropdownWithLoading.parameters={...DropdownWithLoading.parameters,docs:{...DropdownWithLoading.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const options = useMemo(() => [{\n      value: "1",\n      label: "Option 1"\n    }, {\n      value: "2",\n      label: "Option 2"\n    }, {\n      value: "3",\n      label: "Option 3"\n    }], []);\n    const loadingOnInputChange = useCallback(() => {\n      setIsLoading(true);\n      setTimeout(() => {\n        setIsLoading(false);\n      }, 1000);\n    }, []);\n    return <Dropdown placeholder={"Type to start loading"} options={options} isLoading={isLoading} loadingMessage={() => "Loading options..."} className="dropdown-stories-styles_big-spacing" onInputChange={loadingOnInputChange} />;\n  },\n  name: "Dropdown with loading"\n}',...DropdownWithLoading.parameters?.docs?.source}}},DropdownWithRef.parameters={...DropdownWithRef.parameters,docs:{...DropdownWithRef.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const ref = useRef();\n    const options = useMemo(() => [{\n      value: "1",\n      label: "Option 1"\n    }, {\n      value: "2",\n      label: "Option 2"\n    }, {\n      value: "3",\n      label: "Option 3"\n    }], []);\n    const focusDropdownInput = useCallback(() => {\n      console.log("Dropdown ref.current = ", ref.current);\n      ref.current.select.focus();\n    }, []);\n    return <Flex direction={Flex.directions.ROW}>\n        <Dropdown placeholder="Dropdown with ref" options={options} ref={ref} className="dropdown-stories-styles_spacing" />\n        <Button onClick={focusDropdownInput} className="dropdown-stories-styles_button">\n          Focus dropdown input\n        </Button>\n      </Flex>;\n  },\n  name: "Dropdown with ref"\n}',...DropdownWithRef.parameters?.docs?.source}}},DropdownValueSelection.parameters={...DropdownValueSelection.parameters,docs:{...DropdownValueSelection.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => [{\n      value: "1",\n      label: "Option 1"\n    }, {\n      value: "2",\n      label: "Option 2"\n    }, {\n      value: "3",\n      label: "Option 3"\n    }], []);\n    return <Flex gap={Flex.gaps.LARGE}>\n        <Dropdown placeholder="Tab selects value" options={options} className="dropdown-stories-styles_big-spacing" />\n        <Dropdown placeholder="Tab does not select value" options={options} tabSelectsValue={false} className="dropdown-stories-styles_big-spacing" />\n      </Flex>;\n  },\n  name: "Dropdown value selection"\n}',...DropdownValueSelection.parameters?.docs?.source}}};const __namedExportsOrder=["Overview","Sizes","Disabled","Readonly","Rtl","MultiChoiceWithDifferentStates","AsyncDropdown","DropdownWithAvatar","DropdownWithIcon","DropdownWithChipColors","DropdownWithTooltipsOnItems","DropdownWithChips","SearchableDropdown","DropdownWithLabels","DropdownInsideAForm","DropdownWithGroups","DropdownInsidePopover","DropdownWithLoading","DropdownWithRef","DropdownValueSelection"]},"../storybook-blocks/dist/src/components/story-description/story-description.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>p});var jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js"),react=__webpack_require__("../../node_modules/react/index.js"),classnames=__webpack_require__("../../node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),withStaticProps=__webpack_require__("../storybook-blocks/dist/src/types/withStaticProps.js"),FlexConstants=__webpack_require__("../storybook-blocks/dist/src/helpers/components/Flex/FlexConstants.js"),Flex=__webpack_require__("../storybook-blocks/dist/src/helpers/components/Flex/Flex.js"),e_description="story-description-module_description__yFjQO",e_vertical="story-description-module_vertical__C1SJj";const m=t=>{var o,l,n,{description:a="",headerStyle:p,children:u,vertical:v=!1,className:f,align:j,justify:g=(null===(o=m.justify)||void 0===o?void 0:o.START),headerAlign:h,headerJustify:y}=t;const x=(0,react.useMemo)((()=>{var i,s;return v?null===(i=m.directions)||void 0===i?void 0:i.COLUMN:null===(s=m.directions)||void 0===s?void 0:s.ROW}),[v]);return(0,jsx_runtime.jsxs)(Flex.A,{direction:x,gap:null===(l=m.gaps)||void 0===l?void 0:l.MEDIUM,justify:g,align:j||void 0,className:f,children:[(0,jsx_runtime.jsx)(Flex.A,{className:classnames_default()(e_description,{[e_vertical]:v}),style:Object.assign({width:"120px"},p),justify:y,align:h||(null===(n=m.align)||void 0===n?void 0:n.CENTER),children:a}),u]})};var p=(0,withStaticProps.N)(m,{justify:FlexConstants.aP,align:FlexConstants.xB,gaps:FlexConstants.Us,directions:FlexConstants.bo})},"./src/components/Dropdown/__stories__/Dropdown.stories.helpers.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{B:()=>TipDevTipPopover,Y:()=>fakeFetchUsers});__webpack_require__("../../node_modules/react/index.js");var vibe_storybook_components__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../storybook-blocks/dist/src/components/tip/tip.js"),vibe_storybook_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../storybook-blocks/dist/src/components/storybook-link/storybook-link.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/react/jsx-runtime.js");const TipDevTipPopover=()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(vibe_storybook_components__WEBPACK_IMPORTED_MODULE_2__.A,{title:"Dev tip",children:["For more details about dropdowns APIs for displaying correctly inside"," ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(vibe_storybook_components__WEBPACK_IMPORTED_MODULE_3__.A,{page:"Components/Dialog/Dialog",size:vibe_storybook_components__WEBPACK_IMPORTED_MODULE_3__.A.sizes.SMALL,children:"Dialogs,"})," ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(vibe_storybook_components__WEBPACK_IMPORTED_MODULE_3__.A,{page:"Feedback/Modal",size:vibe_storybook_components__WEBPACK_IMPORTED_MODULE_3__.A.sizes.SMALL,children:"Modals"})," ","and other popovers click"," ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(vibe_storybook_components__WEBPACK_IMPORTED_MODULE_3__.A,{page:"Technical patterns/Dropdowns inside pop overs",story:"Modal with damaged dropdown",size:vibe_storybook_components__WEBPACK_IMPORTED_MODULE_3__.A.sizes.SMALL,children:"here"}),"."]});TipDevTipPopover.displayName="TipDevTipPopover";const fakeFetchUsers=()=>new Promise((resolve=>{setTimeout((()=>{const users=[{id:"1",name:"Yossi Saadi"},{id:"2",name:"Shahar Zilberman"},{id:"3",name:"Tal Koren"},{id:"4",name:"Meirav Ron"},{id:"5",name:"Yael Bein"}];resolve({json:()=>Promise.resolve(users)})}),1e3)}))},"./src/storybook/patterns/dropdown-in-modals/ModalExampleContent.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("../../node_modules/react/index.js");var _components__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/Flex/Flex.tsx"),_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/Skeleton/Skeleton.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/react/jsx-runtime.js");const ModalExampleContent=()=>{const children=Array.from({length:2},((_value,index)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components__WEBPACK_IMPORTED_MODULE_2__.A,{gap:_components__WEBPACK_IMPORTED_MODULE_2__.A.gaps.SMALL,style:{width:"100%"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components__WEBPACK_IMPORTED_MODULE_3__.A,{type:_components__WEBPACK_IMPORTED_MODULE_3__.A.types.CIRCLE,width:30,height:30}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components__WEBPACK_IMPORTED_MODULE_3__.A,{type:_components__WEBPACK_IMPORTED_MODULE_3__.A.types.TEXT,fullWidth:!0})]},index)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components__WEBPACK_IMPORTED_MODULE_2__.A,{direction:_components__WEBPACK_IMPORTED_MODULE_2__.A.directions.COLUMN,align:_components__WEBPACK_IMPORTED_MODULE_2__.A.align.START,gap:_components__WEBPACK_IMPORTED_MODULE_2__.A.gaps.SMALL,children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components__WEBPACK_IMPORTED_MODULE_3__.A,{type:_components__WEBPACK_IMPORTED_MODULE_3__.A.types.TEXT,size:_components__WEBPACK_IMPORTED_MODULE_3__.A.sizes.TEXT.H1,fullWidth:!0}),children]})};ModalExampleContent.displayName="ModalExampleContent";const __WEBPACK_DEFAULT_EXPORT__=ModalExampleContent;try{ModalExampleContent.displayName="ModalExampleContent",ModalExampleContent.__docgenInfo={description:"",displayName:"ModalExampleContent",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/storybook/patterns/dropdown-in-modals/ModalExampleContent.tsx#ModalExampleContent"]={docgenInfo:ModalExampleContent.__docgenInfo,name:"ModalExampleContent",path:"src/storybook/patterns/dropdown-in-modals/ModalExampleContent.tsx#ModalExampleContent"})}catch(__react_docgen_typescript_loader_error){}},"./src/tests/interactions-utils.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Jw:()=>expectActiveElementToHavePartialText,Ld:()=>interactionSuite,NX:()=>getByLabelText,Tf:()=>getByText,Xr:()=>getFirstByClassName,Z8:()=>clearText,cb:()=>delay,gy:()=>getByRole,h5:()=>getByTestId,jp:()=>clickElement,kD:()=>typeMultipleTimes,lI:()=>waitForElementVisible,vZ:()=>pressNavigationKey,wQ:()=>typeText});var _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/@storybook/testing-library/dist/index.mjs"),_testing_library_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/@testing-library/react/dist/@testing-library/react.esm.js"),_constants__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/tests/constants.ts"),_storybook_jest__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../node_modules/@storybook/jest/dist/index.mjs");const testFunctionWrapper=testFunc=>async _ref=>{let{canvasElement,args}=_ref;const canvas=getWithin(canvasElement);return testFunc(canvas,args)},clearText=async element=>{_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.Q4.clear(element)};function logFunctionStart(name){(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_2__.E)(` ➡️ ${name}`).toBeDefined()}function getWithin(canvasOrValidTestElement){if(canvasOrValidTestElement instanceof HTMLElement){const result=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.ux)(canvasOrValidTestElement);if(result instanceof Error)throw result;return result}if(canvasOrValidTestElement.getByRole)return canvasOrValidTestElement}const interactionSuite=_ref3=>{let{beforeEach=null,beforeAll=null,skip=!1,tests,afterEach=null,afterAll=null}=_ref3;return async _ref4=>{let{canvasElement,args}=_ref4;if(!skip){beforeAll&&(logFunctionStart("Before all:"),await testFunctionWrapper(beforeAll)({canvasElement,args}));for(const test of tests){const fnName=test.name;beforeEach&&(logFunctionStart(`Before: ${fnName}`),await testFunctionWrapper(beforeEach)({canvasElement,args})),logFunctionStart(`Running : ${fnName}`),await testFunctionWrapper(test)({canvasElement,args}),afterEach&&(logFunctionStart(`After: ${fnName}`),await testFunctionWrapper(afterEach)({canvasElement,args}))}afterAll&&(logFunctionStart("After all:"),await testFunctionWrapper(afterAll)({canvasElement,args}))}}},getByTestId=(rootElement,dataTestId)=>getWithin(rootElement).getByTestId(dataTestId),getFirstByClassName=className=>document.getElementsByClassName(className)[0],getByRole=function(rootElement,role){let options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return getWithin(rootElement).getByRole(role,options)},getByLabelText=(rootElement,text)=>getWithin(rootElement).getByLabelText(text),getByText=function(rootElement,text){let options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return getWithin(rootElement).getByText(text,options)},clickElement=element=>_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.Q4.click(element),typeText=async function(element,text){let waitForDebounceMs=arguments.length>2&&void 0!==arguments[2]?arguments[2]:250;const promise=_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.Q4.type(element,text,{delay:50}),result=await promise;return await delay(waitForDebounceMs),result},expectActiveElementToHavePartialText=text=>{(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_2__.E)(document.activeElement).toHaveTextContent(text)},pressNavigationKey=async function(){let command=arguments.length>0&&void 0!==arguments[0]?arguments[0]:_constants__WEBPACK_IMPORTED_MODULE_3__.G.TAB,waitForDebounceMs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const promise=command===_constants__WEBPACK_IMPORTED_MODULE_3__.G.TAB?_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.Q4.tab():_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.Q4.keyboard(command),result=await promise;return await delay(waitForDebounceMs),result};function delay(timeout){return new Promise((resolve=>{if(!timeout)return resolve(void 0);setTimeout(resolve,timeout)}))}const waitForElementVisible=getterFunc=>new Promise((resolve=>{let element;(0,_testing_library_react__WEBPACK_IMPORTED_MODULE_1__.fm)((async()=>{element=await getterFunc(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_2__.E)(element).toBeVisible()})).then((()=>{resolve(element)}))})),typeMultipleTimes=async function(text,count){let options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{delay:70};text=text.repeat(count),await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.Q4.keyboard(text,options)}},"../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[16].use[1]!../../node_modules/resolve-url-loader/index.js!../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[16].use[3]!./src/components/Dropdown/__stories__/Dropdown.stories.scss":(module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/css-loader/dist/runtime/sourceMaps.js"),_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__),_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/css-loader/dist/runtime/api.js"),___CSS_LOADER_EXPORT___=__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__)()(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default());___CSS_LOADER_EXPORT___.push([module.id,".dropdown-stories-styles_spacing{min-width:250px;margin:10px 20px 40px}.dropdown-stories-styles_rules-spacing{margin-bottom:100px;min-width:250px}.dropdown-stories-styles_big-spacing{min-width:250px;margin:0 0 130px}.dropdown-stories-styles_with-chips{min-width:300px;margin:0 0 130px}.dropdown-stories-styles_name{padding:0 8px;font-size:14px}.dropdown-stories-styles_name span{color:var(--sb-icon-color);margin-left:4px}.dropdown-stories-styles_inline-container{display:flex;align-items:center;justify-content:center}.dropdown-stories-styles_button{margin:10px 20px 40px}","",{version:3,sources:["webpack://./src/components/Dropdown/__stories__/Dropdown.stories.scss"],names:[],mappings:"AAGE,iCACE,eAAA,CACA,qBAAA,CAGF,uCACE,mBAAA,CACA,eAAA,CAGF,qCACE,eAAA,CACA,gBAAA,CAGF,oCACE,eAAA,CACA,gBAAA,CAGF,8BACE,aAAA,CACA,cAAA,CAEA,mCACE,0BAAA,CACA,eAAA,CAIJ,0CACE,YAAA,CACA,kBAAA,CACA,sBAAA,CAGF,gCACE,qBAAA",sourcesContent:['@import "../../../styles/typography";\n\n.dropdown-stories-styles {\n  &_spacing {\n    min-width: 250px;\n    margin: 10px 20px 40px;\n  }\n\n  &_rules-spacing {\n    margin-bottom: 100px;\n    min-width: 250px;\n  }\n\n  &_big-spacing {\n    min-width: 250px;\n    margin: 0 0 130px;\n  }\n\n  &_with-chips {\n    min-width: 300px;\n    margin: 0 0 130px;\n  }\n\n  &_name {\n    padding: 0 8px;\n    font-size: 14px;\n\n    span {\n      color: var(--sb-icon-color);\n      margin-left: 4px;\n    }\n  }\n\n  &_inline-container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  &_button {\n    margin: 10px 20px 40px;\n  }\n}\n'],sourceRoot:""}]);const __WEBPACK_DEFAULT_EXPORT__=___CSS_LOADER_EXPORT___}}]);