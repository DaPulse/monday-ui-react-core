"use strict";(globalThis.webpackChunkmonday_ui_react_core=globalThis.webpackChunkmonday_ui_react_core||[]).push([[4139],{"./src/components/Combobox/__stories__/Combobox.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ComboboxAsPersonPicker:()=>ComboboxAsPersonPicker,ComboboxInsideADialog:()=>ComboboxInsideADialog,Default:()=>Default,LoadingState:()=>LoadingState,Overview:()=>Overview,Sizes:()=>Sizes,WithButton:()=>WithButton,WithCategories:()=>WithCategories,WithCreation:()=>WithCreation,WithIcons:()=>WithIcons,WithOptionRenderer:()=>WithOptionRenderer,WithVirtualizationOptimization:()=>WithVirtualizationOptimization,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Combobox_stories_Combobox_stories});var react=__webpack_require__("../../node_modules/react/index.js"),story_description=__webpack_require__("../storybook-blocks/dist/src/components/story-description/story-description.js"),Combobox=__webpack_require__("./src/components/Combobox/Combobox.tsx");const person1_namespaceObject=__webpack_require__.p+"static/media/person1.de30c8ee.png",person2_namespaceObject=__webpack_require__.p+"static/media/person2.2c51a581.png",person3_namespaceObject=__webpack_require__.p+"static/media/person3.7ed20eb8.png";var dist=__webpack_require__("../../node_modules/@storybook/jest/dist/index.mjs"),testing_library_dist=__webpack_require__("../../node_modules/@storybook/testing-library/dist/index.mjs"),interactions_helper=__webpack_require__("./src/__tests__/interactions-helper.ts"),interactions_utils=__webpack_require__("./src/tests/interactions-utils.ts"),test_ids_utils=__webpack_require__("./src/tests/test-ids-utils.ts"),constants=__webpack_require__("./src/tests/constants.ts");async function getComponentElements(canvas){const comboboxElement=(0,interactions_utils.h5)(canvas,constants.w.COMBOBOX);return{comboboxElement,searchElement:(0,interactions_utils.NX)(comboboxElement,"Search for content")}}const defaultPlaySuite=(0,interactions_utils.Ld)({tests:[async function onNavigateBetweenOptionsByArrowsAriaUpdates(canvas){const{comboboxElement,searchElement}=await getComponentElements(canvas);await(0,interactions_utils.jp)(searchElement),await(0,interactions_utils.vZ)(constants.G.DOWN_ARROW);const option1=(0,interactions_utils.Tf)(comboboxElement,"Option 1").parentElement;let ariaActiveDescendant=searchElement.getAttribute("aria-activedescendant");(0,dist.E)(ariaActiveDescendant).toEqual(option1.id),await(0,interactions_utils.vZ)(constants.G.DOWN_ARROW);const option2=(0,interactions_utils.Tf)(comboboxElement,"Option 2").parentElement;ariaActiveDescendant=searchElement.getAttribute("aria-activedescendant"),(0,dist.E)(ariaActiveDescendant).toEqual(option2.id),await(0,interactions_utils.vZ)(constants.G.UP_ARROW),ariaActiveDescendant=searchElement.getAttribute("aria-activedescendant"),(0,dist.E)(ariaActiveDescendant).toEqual(option1.id)},async function onTypeFilterComboboxOptionsTest(canvas){const{comboboxElement,searchElement}=await getComponentElements(canvas);await(0,interactions_utils.wQ)(searchElement,"jjj",400),(0,dist.E)((0,testing_library_dist.D3)(comboboxElement,"Option 1")).toBeNull()},async function onSelectExistFilterClearsFilterTest(canvas){const{comboboxElement,searchElement}=await getComponentElements(canvas);await(0,interactions_utils.wQ)(searchElement,"jjj",400);const cleanSearchButton=(0,interactions_utils.h5)(comboboxElement,(0,test_ids_utils.G)(constants.w.CLEAN_SEARCH_BUTTON,"combobox-search"));await(0,interactions_utils.jp)(cleanSearchButton),(0,dist.E)(searchElement).toHaveValue("");const option1=(0,interactions_utils.Tf)(comboboxElement,"Option 1");(0,dist.E)(option1).toBeInTheDocument()}],afterEach:async()=>{await(0,interactions_helper.S)()}});var DialogContentContainer=__webpack_require__("./src/components/DialogContentContainer/DialogContentContainer.tsx"),Button=__webpack_require__("./src/components/Button/Button.tsx"),Dialog=__webpack_require__("./src/components/Dialog/Dialog.tsx"),Wand=__webpack_require__("./src/components/Icon/Icons/components/Wand.tsx"),ThumbsUp=__webpack_require__("./src/components/Icon/Icons/components/ThumbsUp.tsx"),Time=__webpack_require__("./src/components/Icon/Icons/components/Time.tsx"),Update=__webpack_require__("./src/components/Icon/Icons/components/Update.tsx"),Upgrade=__webpack_require__("./src/components/Icon/Icons/components/Upgrade.tsx"),Person=__webpack_require__("./src/components/Icon/Icons/components/Person.tsx"),Edit=__webpack_require__("./src/components/Icon/Icons/components/Edit.tsx"),Avatar=__webpack_require__("./src/components/Avatar/Avatar.tsx"),Flex=__webpack_require__("./src/components/Flex/Flex.tsx"),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");const optionRenderer=_ref=>{let{src,id,label,position}=_ref;return(0,jsx_runtime.jsxs)("div",{className:"person-picker-mock-option",children:[(0,jsx_runtime.jsx)(Avatar.A,{customSize:22,src,type:Avatar.A.types.IMG},id),(0,jsx_runtime.jsxs)("span",{className:"person-picker-mock-name",children:[label,(0,jsx_runtime.jsx)("span",{children:position})]})]})};optionRenderer.displayName="optionRenderer",optionRenderer.__docgenInfo={description:"",methods:[],displayName:"optionRenderer"};var createStoryMetaSettingsDecorator=__webpack_require__("./src/storybook/functions/createStoryMetaSettingsDecorator.ts"),Icon=__webpack_require__("./src/components/Icon/Icon.tsx"),injectStylesIntoStyleTag=__webpack_require__("../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),injectStylesIntoStyleTag_default=__webpack_require__.n(injectStylesIntoStyleTag),styleDomAPI=__webpack_require__("../../node_modules/style-loader/dist/runtime/styleDomAPI.js"),styleDomAPI_default=__webpack_require__.n(styleDomAPI),insertBySelector=__webpack_require__("../../node_modules/style-loader/dist/runtime/insertBySelector.js"),insertBySelector_default=__webpack_require__.n(insertBySelector),setAttributesWithoutAttributes=__webpack_require__("../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),setAttributesWithoutAttributes_default=__webpack_require__.n(setAttributesWithoutAttributes),insertStyleElement=__webpack_require__("../../node_modules/style-loader/dist/runtime/insertStyleElement.js"),insertStyleElement_default=__webpack_require__.n(insertStyleElement),styleTagTransform=__webpack_require__("../../node_modules/style-loader/dist/runtime/styleTagTransform.js"),styleTagTransform_default=__webpack_require__.n(styleTagTransform),Combobox_stories=__webpack_require__("../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[16].use[1]!../../node_modules/resolve-url-loader/index.js!../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[16].use[3]!./src/components/Combobox/__stories__/Combobox.stories.scss"),options={};options.styleTagTransform=styleTagTransform_default(),options.setAttributes=setAttributesWithoutAttributes_default(),options.insert=insertBySelector_default().bind(null,"head"),options.domAPI=styleDomAPI_default(),options.insertStyleElement=insertStyleElement_default();injectStylesIntoStyleTag_default()(Combobox_stories.A,options);Combobox_stories.A&&Combobox_stories.A.locals&&Combobox_stories.A.locals;const metaSettings=(0,createStoryMetaSettingsDecorator.B)({component:Combobox.A,enumPropNamesArray:["size"],iconPropNamesArray:["searchIcon"],actionPropsArray:["onOptionHover","onOptionLeave","onFilterChanged"]}),Combobox_stories_Combobox_stories={parameters:{storySource:{source:'import React, { useMemo, useState } from "react";\nimport { StoryDescription } from "vibe-storybook-components";\nimport Combobox, { ComboboxProps } from "../Combobox";\nimport person1 from "./assets/person1.png";\nimport person2 from "./assets/person2.png";\nimport person3 from "./assets/person3.png";\nimport { defaultPlaySuite } from "../__tests__/Combobox.interactions";\nimport DialogContentContainer from "../../DialogContentContainer/DialogContentContainer";\nimport Button from "../../Button/Button";\nimport Dialog from "../../Dialog/Dialog";\nimport { Edit, Person, ThumbsUp, Time, Update, Upgrade, Wand } from "../../Icon/Icons";\nimport Avatar from "../../Avatar/Avatar";\nimport Flex from "../../Flex/Flex";\nimport { optionRenderer } from "./OptionRenderer";\nimport { createStoryMetaSettingsDecorator } from "../../../storybook";\nimport { Icon } from "../../index";\nimport "./Combobox.stories.scss";\n\nconst metaSettings = createStoryMetaSettingsDecorator({\n  component: Combobox,\n  enumPropNamesArray: ["size"],\n  iconPropNamesArray: ["searchIcon"],\n  actionPropsArray: ["onOptionHover", "onOptionLeave", "onFilterChanged"]\n});\n\nexport default {\n  title: "Inputs/Combobox",\n  component: Combobox,\n  argTypes: metaSettings.argTypes,\n  decorators: metaSettings.decorators\n};\n\nconst comboboxTemplate = (args: ComboboxProps) => {\n  return (\n    <DialogContentContainer>\n      <Combobox {...args} />\n    </DialogContentContainer>\n  );\n};\n\nexport const Overview = {\n  render: comboboxTemplate.bind({}),\n  args: {\n    options: [\n      {\n        id: "1",\n        label: "Option 1"\n      },\n      {\n        id: "2",\n        label: "Option 2"\n      },\n      {\n        id: "3",\n        label: "Option 3"\n      }\n    ],\n\n    onClick: () => alert("clicked"),\n    placeholder: "Placeholder text here",\n    clearFilterOnSelection: true\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        isEnabled: false\n      }\n    }\n  }\n};\n\nexport const Default = {\n  render: () => {\n    const options = useMemo(\n      () => [\n        {\n          id: "1",\n          label: "Option 1"\n        },\n        {\n          id: "2",\n          label: "Option 2"\n        },\n        {\n          id: "3",\n          label: "Option 3"\n        }\n      ],\n      []\n    );\n\n    return <Combobox placeholder="Placeholder text here" options={options} />;\n  },\n  play: defaultPlaySuite\n};\n\nexport const ComboboxInsideADialog = {\n  render: () => {\n    const options = useMemo(\n      () => [\n        {\n          id: "1",\n          label: "Option 1"\n        },\n        {\n          id: "2",\n          label: "Option 2"\n        },\n        {\n          id: "3",\n          label: "Option 3"\n        },\n        {\n          id: "4",\n          label: "Option 4"\n        },\n        {\n          id: "5",\n          label: "Option 5"\n        }\n      ],\n      []\n    );\n\n    return (\n      <DialogContentContainer>\n        <Combobox options={options} placeholder="Placeholder text here" />\n      </DialogContentContainer>\n    );\n  },\n  name: "Combobox inside a dialog"\n};\n\nexport const Sizes = {\n  render: () => {\n    const options = useMemo(\n      () => [\n        {\n          id: "1",\n          label: "Option 1"\n        },\n        {\n          id: "2",\n          label: "Option 2"\n        },\n        {\n          id: "3",\n          label: "Option 3"\n        },\n        {\n          id: "4",\n          label: "Option 4"\n        },\n        {\n          id: "5",\n          label: "Option 5"\n        }\n      ],\n      []\n    );\n\n    return (\n      <div className="combobox-stories-styles_row">\n        <DialogContentContainer>\n          <Combobox options={options} size={Combobox.sizes.SMALL} placeholder="Placeholder text here" />\n        </DialogContentContainer>\n        <DialogContentContainer>\n          <Combobox options={options} placeholder="Placeholder text here" />\n        </DialogContentContainer>\n        <DialogContentContainer>\n          <Combobox options={options} size={Combobox.sizes.LARGE} placeholder="Placeholder text here" />\n        </DialogContentContainer>\n      </div>\n    );\n  }\n};\n\nexport const WithCategories = {\n  render: () => {\n    const options = useMemo(\n      () => [\n        {\n          id: "1",\n          label: "Favorites",\n          categoryId: "favorites"\n        },\n        {\n          id: "2",\n          label: "Main workspace",\n          categoryId: "workspace"\n        },\n        {\n          id: "3",\n          label: "Client Foundations",\n          categoryId: "workspace"\n        },\n        {\n          id: "4",\n          label: "Design",\n          categoryId: "workspace"\n        },\n        {\n          id: "5",\n          label: "Marketing Cluster",\n          categoryId: "workspace"\n        },\n        {\n          id: "6",\n          label: "Mobile",\n          categoryId: "workspace"\n        }\n      ],\n      []\n    );\n\n    const categories = useMemo(\n      () => ({\n        favorites: {\n          id: "favorites",\n          label: "Favorites"\n        },\n\n        workspace: {\n          id: "Workspaces",\n          label: "Workspaces"\n        }\n      }),\n      []\n    );\n\n    return (\n      <Flex\n        gap={50}\n        style={{\n          width: "100%"\n        }}\n        justify={Flex.justify.START}\n        align={Flex.align.START}\n      >\n        <StoryDescription\n          description="Regular"\n          vertical\n          // @ts-ignore\n          align={Flex.align.START}\n        >\n          <DialogContentContainer\n            style={{\n              height: "200px"\n            }}\n          >\n            <Combobox options={options} categories={categories} placeholder="Placeholder text here" />\n          </DialogContentContainer>\n        </StoryDescription>\n        <StoryDescription\n          description="Sticky mode"\n          vertical\n          // @ts-ignore\n          align={Flex.align.START}\n        >\n          <DialogContentContainer\n            style={{\n              height: "200px"\n            }}\n          >\n            <Combobox stickyCategories options={options} categories={categories} placeholder="Placeholder text here" />\n          </DialogContentContainer>\n        </StoryDescription>\n        <StoryDescription\n          description="With divider"\n          vertical // @ts-ignore\n          align={Flex.align.START}\n        >\n          <DialogContentContainer\n            style={{\n              height: "200px"\n            }}\n          >\n            <Combobox\n              stickyCategories\n              options={options}\n              categories={categories}\n              withCategoriesDivider\n              placeholder="Placeholder text here"\n            />\n          </DialogContentContainer>\n        </StoryDescription>\n      </Flex>\n    );\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { StoryDescription }\n      }\n    }\n  },\n  name: "With categories"\n};\n\nexport const WithIcons = {\n  render: () => {\n    const options = useMemo(\n      () => [\n        {\n          id: "1",\n          label: "Option 1",\n          leftIcon: Wand\n        },\n        {\n          id: "2",\n          label: "Option 2",\n          leftIcon: ThumbsUp\n        },\n        {\n          id: "3",\n          label: "Option 3",\n          leftIcon: Time\n        },\n        {\n          id: "4",\n          label: "Option 4",\n          leftIcon: Update\n        },\n        {\n          id: "5",\n          label: "Option 5",\n          leftIcon: Upgrade\n        }\n      ],\n      []\n    );\n\n    return (\n      <DialogContentContainer>\n        <Combobox options={options} placeholder="Placeholder text here" />\n      </DialogContentContainer>\n    );\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { Wand, ThumbsUp, Time, Update, Upgrade }\n      }\n    }\n  },\n  name: "With icons"\n};\n\nexport const WithOptionRenderer = {\n  render: () => {\n    const options = useMemo(\n      () => [\n        { id: "1", label: "Option 1" },\n        { id: "2", label: "Option 2" },\n        { id: "3", label: "Option 3" },\n        { id: "4", label: "Option 4" },\n        { id: "5", label: "Option 5" },\n        { id: "6", label: "Option 6" },\n        { id: "7", label: "Option 7" },\n        { id: "8", label: "Option 8" },\n        { id: "9", label: "Option 9" }\n      ],\n      []\n    );\n    const optionRenderer = (option: any) => (\n      <div>\n        <Icon icon={Person} /> I can render anything with {option.label}\n      </div>\n    );\n    return (\n      <DialogContentContainer>\n        <Combobox\n          options={options}\n          optionRenderer={optionRenderer}\n          placeholder="Placeholder text here"\n          maxOptionsWithoutScroll={3}\n        />\n      </DialogContentContainer>\n    );\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { Person }\n      }\n    }\n  },\n  name: "With optionRenderer"\n};\n\nexport const WithButton = {\n  render: () => {\n    const options = useMemo(\n      () => [\n        {\n          id: "1",\n          label: "Option 1",\n          leftIcon: Wand\n        },\n        {\n          id: "2",\n          label: "Option 2",\n          leftIcon: ThumbsUp\n        },\n        {\n          id: "3",\n          label: "Option 3",\n          leftIcon: Time\n        },\n        {\n          id: "4",\n          label: "Option 4",\n          leftIcon: Update\n        },\n        {\n          id: "5",\n          label: "Option 5",\n          leftIcon: Upgrade\n        }\n      ],\n      []\n    );\n\n    return (\n      <DialogContentContainer>\n        <Combobox options={options} placeholder="Placeholder text here" />\n        <Button kind={Button.kinds.TERTIARY} className="combobox-stories-styles_btn" leftIcon={Edit}>\n          Edit\n        </Button>\n      </DialogContentContainer>\n    );\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { Wand, ThumbsUp, Time, Update, Upgrade, Edit }\n      }\n    }\n  }\n};\n\nexport const WithCreation = {\n  render: () => {\n    const [options, setOptions] = useState([]);\n\n    return (\n      <DialogContentContainer>\n        <Combobox\n          options={options}\n          placeholder="Type to create"\n          addNewLabel="Create new item"\n          onAddNew={() =>\n            setOptions([\n              ...options,\n              {\n                id: options.length + 1,\n                label: `Option: ${options.length + 1}`\n              }\n            ])\n          }\n        />\n      </DialogContentContainer>\n    );\n  }\n};\n\nexport const WithVirtualizationOptimization = {\n  render: () => {\n    const options = useMemo(\n      () => [\n        {\n          id: "1",\n          label: "Option 1",\n          categoryId: "Group1"\n        },\n        {\n          id: "2",\n          label: "Option 2",\n          categoryId: "Group1"\n        },\n        {\n          id: "3",\n          label: "Option 3",\n          categoryId: "Group1"\n        },\n        {\n          id: "4",\n          label: "Option 4",\n          categoryId: "Group1"\n        },\n        {\n          id: "5",\n          label: "Option 5",\n          categoryId: "Group1"\n        },\n        {\n          id: "6",\n          label: "Option 6",\n          categoryId: "Group1"\n        },\n        {\n          id: "7",\n          label: "Option 7",\n          categoryId: "Group1"\n        },\n        {\n          id: "8",\n          label: "Option 8",\n          categoryId: "Group1"\n        },\n        {\n          id: "9",\n          label: "Option 9",\n          categoryId: "Group1"\n        },\n        {\n          id: "10",\n          label: "Option 10",\n          categoryId: "Group2"\n        },\n        {\n          id: "11",\n          label: "Option 11",\n          categoryId: "Group2"\n        },\n        {\n          id: "12",\n          label: "Option 12",\n          categoryId: "Group2"\n        },\n        {\n          id: "13",\n          label: "Option 13",\n          categoryId: "Group2"\n        },\n        {\n          id: "14",\n          label: "Option 14",\n          categoryId: "Group2"\n        },\n        {\n          id: "15",\n          label: "Option 15",\n          categoryId: "Group2"\n        },\n        {\n          id: "16",\n          label: "Option 16",\n          categoryId: "Group2"\n        },\n        {\n          id: "17",\n          label: "Option 17",\n          categoryId: "Group2"\n        },\n        {\n          id: "18",\n          label: "Option 18",\n          categoryId: "Group2"\n        },\n        {\n          id: "19",\n          label: "Option 19",\n          categoryId: "Group2"\n        },\n        {\n          id: "20",\n          label: "Option 20",\n          categoryId: "Group2"\n        }\n      ],\n      []\n    );\n\n    const categories = useMemo(\n      () => ({\n        Group1: {\n          id: "Group1",\n          label: "Group 1"\n        },\n\n        Group2: {\n          id: "Group2",\n          label: "Group 2"\n        }\n      }),\n      []\n    );\n\n    return (\n      <Flex\n        gap={Flex.gaps.SMALL}\n        style={{\n          width: "100%"\n        }}\n        justify={Flex.justify.CENTER}\n        align={Flex.align.START}\n      >\n        <StoryDescription\n          className="combobox-stories-styles_virtualized-description"\n          // @ts-ignore\n          align={Flex.align.START}\n          description="Virtualization optimization without categories"\n          vertical\n          headerStyle={{\n            width: "70%",\n            textAlign: "start"\n          }}\n        >\n          <div\n            style={{\n              width: "280px"\n            }}\n          >\n            <DialogContentContainer>\n              <Combobox\n                options={options}\n                renderOnlyVisibleOptions\n                placeholder="Placeholder text here"\n                maxOptionsWithoutScroll={3}\n              />\n            </DialogContentContainer>\n          </div>\n        </StoryDescription>\n        <StoryDescription\n          className="combobox-stories-styles_virtualized-description"\n          // @ts-ignore\n          align={Flex.align.START}\n          description="Virtualization optimization with categories"\n          vertical\n          headerStyle={{\n            width: "70%",\n            textAlign: "start"\n          }}\n        >\n          <div\n            style={{\n              width: "280px"\n            }}\n          >\n            <DialogContentContainer>\n              <Combobox\n                options={options}\n                renderOnlyVisibleOptions\n                categories={categories}\n                placeholder="Placeholder text here"\n                maxOptionsWithoutScroll={3}\n              />\n            </DialogContentContainer>\n          </div>\n        </StoryDescription>\n        <StoryDescription\n          className="combobox-stories-styles_virtualized-description"\n          // @ts-ignore\n          align={Flex.align.START}\n          description="Virtualization optimization with sticky categories"\n          vertical\n          headerStyle={{\n            width: "70%",\n            textAlign: "start"\n          }}\n        >\n          <div\n            style={{\n              width: "280px"\n            }}\n          >\n            <DialogContentContainer>\n              <Combobox\n                stickyCategories\n                options={options}\n                renderOnlyVisibleOptions\n                categories={categories}\n                placeholder="Placeholder text here"\n                maxOptionsWithoutScroll={3}\n              />\n            </DialogContentContainer>\n          </div>\n        </StoryDescription>\n      </Flex>\n    );\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { StoryDescription }\n      }\n    }\n  },\n  name: "With virtualization optimization"\n};\n\nexport const LoadingState = {\n  render: () => {\n    const options = useMemo(() => [], []);\n\n    return (\n      <DialogContentContainer>\n        <Combobox loading options={options} placeholder="Board name" />\n      </DialogContentContainer>\n    );\n  },\n  name: "Loading state"\n};\n\nexport const ComboboxAsPersonPicker = {\n  render: () => {\n    const options = useMemo(\n      () => [\n        {\n          id: "Hadas Farhi",\n          label: "Hadas Farhi",\n          src: person1,\n          type: Avatar.types.IMG,\n          position: "(Frontend Developer)",\n          categoryId: "suggestedPeople"\n        },\n        {\n          id: "Rotem Dekel",\n          label: "Rotem Dekel",\n          src: person2,\n          type: Avatar.types.IMG,\n          position: "(Product Designer)",\n          categoryId: "suggestedPeople"\n        },\n        {\n          id: "Netta Muller",\n          label: "Netta Muller",\n          src: person3,\n          type: Avatar.types.IMG,\n          position: "(Brand Designer)",\n          categoryId: "suggestedPeople"\n        }\n      ],\n      []\n    );\n\n    const categories = useMemo(\n      () => ({\n        suggestedPeople: {\n          id: "suggestedPeople",\n          label: "Suggested people"\n        }\n      }),\n      []\n    );\n\n    return (\n      <Flex\n        style={{\n          width: "100%",\n          height: "270px"\n        }}\n        justify={Flex.justify.CENTER}\n        align={Flex.align.START}\n      >\n        <Dialog\n          content={() => (\n            <DialogContentContainer className="combobox-stories-styles_wrapper">\n              <Combobox\n                options={options}\n                categories={categories}\n                optionRenderer={optionRenderer}\n                size={Combobox.sizes.SMALL}\n                placeholder="Search"\n              />\n            </DialogContentContainer>\n          )}\n          tooltip\n          position={Dialog.positions.BOTTOM}\n          open={true}\n        >\n          <div className="person-picker-mock">\n            <Avatar size={Avatar.sizes.SMALL} src={person1} type={Avatar.types.IMG} />\n          </div>\n        </Dialog>\n      </Flex>\n    );\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { person1, person2, person3, optionRenderer }\n      }\n    }\n  },\n  name: "Combobox as person picker"\n};\n',locationsMap:{overview:{startLoc:{col:24,line:41},endLoc:{col:1,line:70},startBody:{col:24,line:41},endBody:{col:1,line:70}},default:{startLoc:{col:23,line:72},endLoc:{col:1,line:95},startBody:{col:23,line:72},endBody:{col:1,line:95}},"combobox-inside-a-dialog":{startLoc:{col:37,line:97},endLoc:{col:1,line:132},startBody:{col:37,line:97},endBody:{col:1,line:132}},sizes:{startLoc:{col:21,line:134},endLoc:{col:1,line:176},startBody:{col:21,line:134},endBody:{col:1,line:176}},"with-categories":{startLoc:{col:30,line:178},endLoc:{col:1,line:298},startBody:{col:30,line:178},endBody:{col:1,line:298}},"with-icons":{startLoc:{col:25,line:300},endLoc:{col:1,line:347},startBody:{col:25,line:300},endBody:{col:1,line:347}},"with-option-renderer":{startLoc:{col:34,line:349},endLoc:{col:1,line:389},startBody:{col:34,line:349},endBody:{col:1,line:389}},"with-button":{startLoc:{col:26,line:391},endLoc:{col:1,line:440},startBody:{col:26,line:391},endBody:{col:1,line:440}},"with-creation":{startLoc:{col:28,line:442},endLoc:{col:1,line:465},startBody:{col:28,line:442},endBody:{col:1,line:465}},"with-virtualization-optimization":{startLoc:{col:46,line:467},endLoc:{col:1,line:691},startBody:{col:46,line:467},endBody:{col:1,line:691}},"loading-state":{startLoc:{col:28,line:693},endLoc:{col:1,line:704},startBody:{col:28,line:693},endBody:{col:1,line:704}},"combobox-as-person-picker":{startLoc:{col:38,line:706},endLoc:{col:1,line:788},startBody:{col:38,line:706},endBody:{col:1,line:788}}}}},title:"Inputs/Combobox",component:Combobox.A,argTypes:metaSettings.argTypes,decorators:metaSettings.decorators},comboboxTemplate=args=>(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(Combobox.A,{...args})});comboboxTemplate.displayName="comboboxTemplate";const Overview={render:comboboxTemplate.bind({}),args:{options:[{id:"1",label:"Option 1"},{id:"2",label:"Option 2"},{id:"3",label:"Option 3"}],onClick:()=>alert("clicked"),placeholder:"Placeholder text here",clearFilterOnSelection:!0},parameters:{docs:{liveEdit:{isEnabled:!1}}}},Default={render:()=>{const options=(0,react.useMemo)((()=>[{id:"1",label:"Option 1"},{id:"2",label:"Option 2"},{id:"3",label:"Option 3"}]),[]);return(0,jsx_runtime.jsx)(Combobox.A,{placeholder:"Placeholder text here",options})},play:defaultPlaySuite},ComboboxInsideADialog={render:()=>{const options=(0,react.useMemo)((()=>[{id:"1",label:"Option 1"},{id:"2",label:"Option 2"},{id:"3",label:"Option 3"},{id:"4",label:"Option 4"},{id:"5",label:"Option 5"}]),[]);return(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(Combobox.A,{options,placeholder:"Placeholder text here"})})},name:"Combobox inside a dialog"},Sizes={render:()=>{const options=(0,react.useMemo)((()=>[{id:"1",label:"Option 1"},{id:"2",label:"Option 2"},{id:"3",label:"Option 3"},{id:"4",label:"Option 4"},{id:"5",label:"Option 5"}]),[]);return(0,jsx_runtime.jsxs)("div",{className:"combobox-stories-styles_row",children:[(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(Combobox.A,{options,size:Combobox.A.sizes.SMALL,placeholder:"Placeholder text here"})}),(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(Combobox.A,{options,placeholder:"Placeholder text here"})}),(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(Combobox.A,{options,size:Combobox.A.sizes.LARGE,placeholder:"Placeholder text here"})})]})}},WithCategories={render:()=>{const options=(0,react.useMemo)((()=>[{id:"1",label:"Favorites",categoryId:"favorites"},{id:"2",label:"Main workspace",categoryId:"workspace"},{id:"3",label:"Client Foundations",categoryId:"workspace"},{id:"4",label:"Design",categoryId:"workspace"},{id:"5",label:"Marketing Cluster",categoryId:"workspace"},{id:"6",label:"Mobile",categoryId:"workspace"}]),[]),categories=(0,react.useMemo)((()=>({favorites:{id:"favorites",label:"Favorites"},workspace:{id:"Workspaces",label:"Workspaces"}})),[]);return(0,jsx_runtime.jsxs)(Flex.A,{gap:50,style:{width:"100%"},justify:Flex.A.justify.START,align:Flex.A.align.START,children:[(0,jsx_runtime.jsx)(story_description.A,{description:"Regular",vertical:!0,align:Flex.A.align.START,children:(0,jsx_runtime.jsx)(DialogContentContainer.A,{style:{height:"200px"},children:(0,jsx_runtime.jsx)(Combobox.A,{options,categories,placeholder:"Placeholder text here"})})}),(0,jsx_runtime.jsx)(story_description.A,{description:"Sticky mode",vertical:!0,align:Flex.A.align.START,children:(0,jsx_runtime.jsx)(DialogContentContainer.A,{style:{height:"200px"},children:(0,jsx_runtime.jsx)(Combobox.A,{stickyCategories:!0,options,categories,placeholder:"Placeholder text here"})})}),(0,jsx_runtime.jsx)(story_description.A,{description:"With divider",vertical:!0,align:Flex.A.align.START,children:(0,jsx_runtime.jsx)(DialogContentContainer.A,{style:{height:"200px"},children:(0,jsx_runtime.jsx)(Combobox.A,{stickyCategories:!0,options,categories,withCategoriesDivider:!0,placeholder:"Placeholder text here"})})})]})},parameters:{docs:{liveEdit:{scope:{StoryDescription:story_description.A}}}},name:"With categories"},WithIcons={render:()=>{const options=(0,react.useMemo)((()=>[{id:"1",label:"Option 1",leftIcon:Wand.A},{id:"2",label:"Option 2",leftIcon:ThumbsUp.A},{id:"3",label:"Option 3",leftIcon:Time.A},{id:"4",label:"Option 4",leftIcon:Update.A},{id:"5",label:"Option 5",leftIcon:Upgrade.A}]),[]);return(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(Combobox.A,{options,placeholder:"Placeholder text here"})})},parameters:{docs:{liveEdit:{scope:{Wand:Wand.A,ThumbsUp:ThumbsUp.A,Time:Time.A,Update:Update.A,Upgrade:Upgrade.A}}}},name:"With icons"},WithOptionRenderer={render:()=>{const options=(0,react.useMemo)((()=>[{id:"1",label:"Option 1"},{id:"2",label:"Option 2"},{id:"3",label:"Option 3"},{id:"4",label:"Option 4"},{id:"5",label:"Option 5"},{id:"6",label:"Option 6"},{id:"7",label:"Option 7"},{id:"8",label:"Option 8"},{id:"9",label:"Option 9"}]),[]);return(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(Combobox.A,{options,optionRenderer:option=>(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(Icon.A,{icon:Person.A})," I can render anything with ",option.label]}),placeholder:"Placeholder text here",maxOptionsWithoutScroll:3})})},parameters:{docs:{liveEdit:{scope:{Person:Person.A}}}},name:"With optionRenderer"},WithButton={render:()=>{const options=(0,react.useMemo)((()=>[{id:"1",label:"Option 1",leftIcon:Wand.A},{id:"2",label:"Option 2",leftIcon:ThumbsUp.A},{id:"3",label:"Option 3",leftIcon:Time.A},{id:"4",label:"Option 4",leftIcon:Update.A},{id:"5",label:"Option 5",leftIcon:Upgrade.A}]),[]);return(0,jsx_runtime.jsxs)(DialogContentContainer.A,{children:[(0,jsx_runtime.jsx)(Combobox.A,{options,placeholder:"Placeholder text here"}),(0,jsx_runtime.jsx)(Button.A,{kind:Button.A.kinds.TERTIARY,className:"combobox-stories-styles_btn",leftIcon:Edit.A,children:"Edit"})]})},parameters:{docs:{liveEdit:{scope:{Wand:Wand.A,ThumbsUp:ThumbsUp.A,Time:Time.A,Update:Update.A,Upgrade:Upgrade.A,Edit:Edit.A}}}}},WithCreation={render:()=>{const[options,setOptions]=(0,react.useState)([]);return(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(Combobox.A,{options,placeholder:"Type to create",addNewLabel:"Create new item",onAddNew:()=>setOptions([...options,{id:options.length+1,label:`Option: ${options.length+1}`}])})})}},WithVirtualizationOptimization={render:()=>{const options=(0,react.useMemo)((()=>[{id:"1",label:"Option 1",categoryId:"Group1"},{id:"2",label:"Option 2",categoryId:"Group1"},{id:"3",label:"Option 3",categoryId:"Group1"},{id:"4",label:"Option 4",categoryId:"Group1"},{id:"5",label:"Option 5",categoryId:"Group1"},{id:"6",label:"Option 6",categoryId:"Group1"},{id:"7",label:"Option 7",categoryId:"Group1"},{id:"8",label:"Option 8",categoryId:"Group1"},{id:"9",label:"Option 9",categoryId:"Group1"},{id:"10",label:"Option 10",categoryId:"Group2"},{id:"11",label:"Option 11",categoryId:"Group2"},{id:"12",label:"Option 12",categoryId:"Group2"},{id:"13",label:"Option 13",categoryId:"Group2"},{id:"14",label:"Option 14",categoryId:"Group2"},{id:"15",label:"Option 15",categoryId:"Group2"},{id:"16",label:"Option 16",categoryId:"Group2"},{id:"17",label:"Option 17",categoryId:"Group2"},{id:"18",label:"Option 18",categoryId:"Group2"},{id:"19",label:"Option 19",categoryId:"Group2"},{id:"20",label:"Option 20",categoryId:"Group2"}]),[]),categories=(0,react.useMemo)((()=>({Group1:{id:"Group1",label:"Group 1"},Group2:{id:"Group2",label:"Group 2"}})),[]);return(0,jsx_runtime.jsxs)(Flex.A,{gap:Flex.A.gaps.SMALL,style:{width:"100%"},justify:Flex.A.justify.CENTER,align:Flex.A.align.START,children:[(0,jsx_runtime.jsx)(story_description.A,{className:"combobox-stories-styles_virtualized-description",align:Flex.A.align.START,description:"Virtualization optimization without categories",vertical:!0,headerStyle:{width:"70%",textAlign:"start"},children:(0,jsx_runtime.jsx)("div",{style:{width:"280px"},children:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(Combobox.A,{options,renderOnlyVisibleOptions:!0,placeholder:"Placeholder text here",maxOptionsWithoutScroll:3})})})}),(0,jsx_runtime.jsx)(story_description.A,{className:"combobox-stories-styles_virtualized-description",align:Flex.A.align.START,description:"Virtualization optimization with categories",vertical:!0,headerStyle:{width:"70%",textAlign:"start"},children:(0,jsx_runtime.jsx)("div",{style:{width:"280px"},children:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(Combobox.A,{options,renderOnlyVisibleOptions:!0,categories,placeholder:"Placeholder text here",maxOptionsWithoutScroll:3})})})}),(0,jsx_runtime.jsx)(story_description.A,{className:"combobox-stories-styles_virtualized-description",align:Flex.A.align.START,description:"Virtualization optimization with sticky categories",vertical:!0,headerStyle:{width:"70%",textAlign:"start"},children:(0,jsx_runtime.jsx)("div",{style:{width:"280px"},children:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(Combobox.A,{stickyCategories:!0,options,renderOnlyVisibleOptions:!0,categories,placeholder:"Placeholder text here",maxOptionsWithoutScroll:3})})})})]})},parameters:{docs:{liveEdit:{scope:{StoryDescription:story_description.A}}}},name:"With virtualization optimization"},LoadingState={render:()=>{const options=(0,react.useMemo)((()=>[]),[]);return(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(Combobox.A,{loading:!0,options,placeholder:"Board name"})})},name:"Loading state"},ComboboxAsPersonPicker={render:()=>{const options=(0,react.useMemo)((()=>[{id:"Hadas Farhi",label:"Hadas Farhi",src:person1_namespaceObject,type:Avatar.A.types.IMG,position:"(Frontend Developer)",categoryId:"suggestedPeople"},{id:"Rotem Dekel",label:"Rotem Dekel",src:person2_namespaceObject,type:Avatar.A.types.IMG,position:"(Product Designer)",categoryId:"suggestedPeople"},{id:"Netta Muller",label:"Netta Muller",src:person3_namespaceObject,type:Avatar.A.types.IMG,position:"(Brand Designer)",categoryId:"suggestedPeople"}]),[]),categories=(0,react.useMemo)((()=>({suggestedPeople:{id:"suggestedPeople",label:"Suggested people"}})),[]);return(0,jsx_runtime.jsx)(Flex.A,{style:{width:"100%",height:"270px"},justify:Flex.A.justify.CENTER,align:Flex.A.align.START,children:(0,jsx_runtime.jsx)(Dialog.A,{content:()=>(0,jsx_runtime.jsx)(DialogContentContainer.A,{className:"combobox-stories-styles_wrapper",children:(0,jsx_runtime.jsx)(Combobox.A,{options,categories,optionRenderer,size:Combobox.A.sizes.SMALL,placeholder:"Search"})}),tooltip:!0,position:Dialog.A.positions.BOTTOM,open:!0,children:(0,jsx_runtime.jsx)("div",{className:"person-picker-mock",children:(0,jsx_runtime.jsx)(Avatar.A,{size:Avatar.A.sizes.SMALL,src:person1_namespaceObject,type:Avatar.A.types.IMG})})})})},parameters:{docs:{liveEdit:{scope:{person1:person1_namespaceObject,person2:person2_namespaceObject,person3:person3_namespaceObject,optionRenderer}}}},name:"Combobox as person picker"};Overview.parameters={...Overview.parameters,docs:{...Overview.parameters?.docs,source:{originalSource:'{\n  render: comboboxTemplate.bind({}),\n  args: {\n    options: [{\n      id: "1",\n      label: "Option 1"\n    }, {\n      id: "2",\n      label: "Option 2"\n    }, {\n      id: "3",\n      label: "Option 3"\n    }],\n    onClick: () => alert("clicked"),\n    placeholder: "Placeholder text here",\n    clearFilterOnSelection: true\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        isEnabled: false\n      }\n    }\n  }\n}',...Overview.parameters?.docs?.source}}},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => [{\n      id: "1",\n      label: "Option 1"\n    }, {\n      id: "2",\n      label: "Option 2"\n    }, {\n      id: "3",\n      label: "Option 3"\n    }], []);\n    return <Combobox placeholder="Placeholder text here" options={options} />;\n  },\n  play: defaultPlaySuite\n}',...Default.parameters?.docs?.source}}},ComboboxInsideADialog.parameters={...ComboboxInsideADialog.parameters,docs:{...ComboboxInsideADialog.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => [{\n      id: "1",\n      label: "Option 1"\n    }, {\n      id: "2",\n      label: "Option 2"\n    }, {\n      id: "3",\n      label: "Option 3"\n    }, {\n      id: "4",\n      label: "Option 4"\n    }, {\n      id: "5",\n      label: "Option 5"\n    }], []);\n    return <DialogContentContainer>\n        <Combobox options={options} placeholder="Placeholder text here" />\n      </DialogContentContainer>;\n  },\n  name: "Combobox inside a dialog"\n}',...ComboboxInsideADialog.parameters?.docs?.source}}},Sizes.parameters={...Sizes.parameters,docs:{...Sizes.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => [{\n      id: "1",\n      label: "Option 1"\n    }, {\n      id: "2",\n      label: "Option 2"\n    }, {\n      id: "3",\n      label: "Option 3"\n    }, {\n      id: "4",\n      label: "Option 4"\n    }, {\n      id: "5",\n      label: "Option 5"\n    }], []);\n    return <div className="combobox-stories-styles_row">\n        <DialogContentContainer>\n          <Combobox options={options} size={Combobox.sizes.SMALL} placeholder="Placeholder text here" />\n        </DialogContentContainer>\n        <DialogContentContainer>\n          <Combobox options={options} placeholder="Placeholder text here" />\n        </DialogContentContainer>\n        <DialogContentContainer>\n          <Combobox options={options} size={Combobox.sizes.LARGE} placeholder="Placeholder text here" />\n        </DialogContentContainer>\n      </div>;\n  }\n}',...Sizes.parameters?.docs?.source}}},WithCategories.parameters={...WithCategories.parameters,docs:{...WithCategories.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => [{\n      id: "1",\n      label: "Favorites",\n      categoryId: "favorites"\n    }, {\n      id: "2",\n      label: "Main workspace",\n      categoryId: "workspace"\n    }, {\n      id: "3",\n      label: "Client Foundations",\n      categoryId: "workspace"\n    }, {\n      id: "4",\n      label: "Design",\n      categoryId: "workspace"\n    }, {\n      id: "5",\n      label: "Marketing Cluster",\n      categoryId: "workspace"\n    }, {\n      id: "6",\n      label: "Mobile",\n      categoryId: "workspace"\n    }], []);\n    const categories = useMemo(() => ({\n      favorites: {\n        id: "favorites",\n        label: "Favorites"\n      },\n      workspace: {\n        id: "Workspaces",\n        label: "Workspaces"\n      }\n    }), []);\n    return <Flex gap={50} style={{\n      width: "100%"\n    }} justify={Flex.justify.START} align={Flex.align.START}>\n        <StoryDescription description="Regular" vertical\n      // @ts-ignore\n      align={Flex.align.START}>\n          <DialogContentContainer style={{\n          height: "200px"\n        }}>\n            <Combobox options={options} categories={categories} placeholder="Placeholder text here" />\n          </DialogContentContainer>\n        </StoryDescription>\n        <StoryDescription description="Sticky mode" vertical\n      // @ts-ignore\n      align={Flex.align.START}>\n          <DialogContentContainer style={{\n          height: "200px"\n        }}>\n            <Combobox stickyCategories options={options} categories={categories} placeholder="Placeholder text here" />\n          </DialogContentContainer>\n        </StoryDescription>\n        <StoryDescription description="With divider" vertical // @ts-ignore\n      align={Flex.align.START}>\n          <DialogContentContainer style={{\n          height: "200px"\n        }}>\n            <Combobox stickyCategories options={options} categories={categories} withCategoriesDivider placeholder="Placeholder text here" />\n          </DialogContentContainer>\n        </StoryDescription>\n      </Flex>;\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          StoryDescription\n        }\n      }\n    }\n  },\n  name: "With categories"\n}',...WithCategories.parameters?.docs?.source}}},WithIcons.parameters={...WithIcons.parameters,docs:{...WithIcons.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => [{\n      id: "1",\n      label: "Option 1",\n      leftIcon: Wand\n    }, {\n      id: "2",\n      label: "Option 2",\n      leftIcon: ThumbsUp\n    }, {\n      id: "3",\n      label: "Option 3",\n      leftIcon: Time\n    }, {\n      id: "4",\n      label: "Option 4",\n      leftIcon: Update\n    }, {\n      id: "5",\n      label: "Option 5",\n      leftIcon: Upgrade\n    }], []);\n    return <DialogContentContainer>\n        <Combobox options={options} placeholder="Placeholder text here" />\n      </DialogContentContainer>;\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          Wand,\n          ThumbsUp,\n          Time,\n          Update,\n          Upgrade\n        }\n      }\n    }\n  },\n  name: "With icons"\n}',...WithIcons.parameters?.docs?.source}}},WithOptionRenderer.parameters={...WithOptionRenderer.parameters,docs:{...WithOptionRenderer.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => [{\n      id: "1",\n      label: "Option 1"\n    }, {\n      id: "2",\n      label: "Option 2"\n    }, {\n      id: "3",\n      label: "Option 3"\n    }, {\n      id: "4",\n      label: "Option 4"\n    }, {\n      id: "5",\n      label: "Option 5"\n    }, {\n      id: "6",\n      label: "Option 6"\n    }, {\n      id: "7",\n      label: "Option 7"\n    }, {\n      id: "8",\n      label: "Option 8"\n    }, {\n      id: "9",\n      label: "Option 9"\n    }], []);\n    const optionRenderer = (option: any) => <div>\n        <Icon icon={Person} /> I can render anything with {option.label}\n      </div>;\n    return <DialogContentContainer>\n        <Combobox options={options} optionRenderer={optionRenderer} placeholder="Placeholder text here" maxOptionsWithoutScroll={3} />\n      </DialogContentContainer>;\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          Person\n        }\n      }\n    }\n  },\n  name: "With optionRenderer"\n}',...WithOptionRenderer.parameters?.docs?.source}}},WithButton.parameters={...WithButton.parameters,docs:{...WithButton.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => [{\n      id: "1",\n      label: "Option 1",\n      leftIcon: Wand\n    }, {\n      id: "2",\n      label: "Option 2",\n      leftIcon: ThumbsUp\n    }, {\n      id: "3",\n      label: "Option 3",\n      leftIcon: Time\n    }, {\n      id: "4",\n      label: "Option 4",\n      leftIcon: Update\n    }, {\n      id: "5",\n      label: "Option 5",\n      leftIcon: Upgrade\n    }], []);\n    return <DialogContentContainer>\n        <Combobox options={options} placeholder="Placeholder text here" />\n        <Button kind={Button.kinds.TERTIARY} className="combobox-stories-styles_btn" leftIcon={Edit}>\n          Edit\n        </Button>\n      </DialogContentContainer>;\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          Wand,\n          ThumbsUp,\n          Time,\n          Update,\n          Upgrade,\n          Edit\n        }\n      }\n    }\n  }\n}',...WithButton.parameters?.docs?.source}}},WithCreation.parameters={...WithCreation.parameters,docs:{...WithCreation.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [options, setOptions] = useState([]);\n    return <DialogContentContainer>\n        <Combobox options={options} placeholder="Type to create" addNewLabel="Create new item" onAddNew={() => setOptions([...options, {\n        id: options.length + 1,\n        label: `Option: ${options.length + 1}`\n      }])} />\n      </DialogContentContainer>;\n  }\n}',...WithCreation.parameters?.docs?.source}}},WithVirtualizationOptimization.parameters={...WithVirtualizationOptimization.parameters,docs:{...WithVirtualizationOptimization.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => [{\n      id: "1",\n      label: "Option 1",\n      categoryId: "Group1"\n    }, {\n      id: "2",\n      label: "Option 2",\n      categoryId: "Group1"\n    }, {\n      id: "3",\n      label: "Option 3",\n      categoryId: "Group1"\n    }, {\n      id: "4",\n      label: "Option 4",\n      categoryId: "Group1"\n    }, {\n      id: "5",\n      label: "Option 5",\n      categoryId: "Group1"\n    }, {\n      id: "6",\n      label: "Option 6",\n      categoryId: "Group1"\n    }, {\n      id: "7",\n      label: "Option 7",\n      categoryId: "Group1"\n    }, {\n      id: "8",\n      label: "Option 8",\n      categoryId: "Group1"\n    }, {\n      id: "9",\n      label: "Option 9",\n      categoryId: "Group1"\n    }, {\n      id: "10",\n      label: "Option 10",\n      categoryId: "Group2"\n    }, {\n      id: "11",\n      label: "Option 11",\n      categoryId: "Group2"\n    }, {\n      id: "12",\n      label: "Option 12",\n      categoryId: "Group2"\n    }, {\n      id: "13",\n      label: "Option 13",\n      categoryId: "Group2"\n    }, {\n      id: "14",\n      label: "Option 14",\n      categoryId: "Group2"\n    }, {\n      id: "15",\n      label: "Option 15",\n      categoryId: "Group2"\n    }, {\n      id: "16",\n      label: "Option 16",\n      categoryId: "Group2"\n    }, {\n      id: "17",\n      label: "Option 17",\n      categoryId: "Group2"\n    }, {\n      id: "18",\n      label: "Option 18",\n      categoryId: "Group2"\n    }, {\n      id: "19",\n      label: "Option 19",\n      categoryId: "Group2"\n    }, {\n      id: "20",\n      label: "Option 20",\n      categoryId: "Group2"\n    }], []);\n    const categories = useMemo(() => ({\n      Group1: {\n        id: "Group1",\n        label: "Group 1"\n      },\n      Group2: {\n        id: "Group2",\n        label: "Group 2"\n      }\n    }), []);\n    return <Flex gap={Flex.gaps.SMALL} style={{\n      width: "100%"\n    }} justify={Flex.justify.CENTER} align={Flex.align.START}>\n        <StoryDescription className="combobox-stories-styles_virtualized-description"\n      // @ts-ignore\n      align={Flex.align.START} description="Virtualization optimization without categories" vertical headerStyle={{\n        width: "70%",\n        textAlign: "start"\n      }}>\n          <div style={{\n          width: "280px"\n        }}>\n            <DialogContentContainer>\n              <Combobox options={options} renderOnlyVisibleOptions placeholder="Placeholder text here" maxOptionsWithoutScroll={3} />\n            </DialogContentContainer>\n          </div>\n        </StoryDescription>\n        <StoryDescription className="combobox-stories-styles_virtualized-description"\n      // @ts-ignore\n      align={Flex.align.START} description="Virtualization optimization with categories" vertical headerStyle={{\n        width: "70%",\n        textAlign: "start"\n      }}>\n          <div style={{\n          width: "280px"\n        }}>\n            <DialogContentContainer>\n              <Combobox options={options} renderOnlyVisibleOptions categories={categories} placeholder="Placeholder text here" maxOptionsWithoutScroll={3} />\n            </DialogContentContainer>\n          </div>\n        </StoryDescription>\n        <StoryDescription className="combobox-stories-styles_virtualized-description"\n      // @ts-ignore\n      align={Flex.align.START} description="Virtualization optimization with sticky categories" vertical headerStyle={{\n        width: "70%",\n        textAlign: "start"\n      }}>\n          <div style={{\n          width: "280px"\n        }}>\n            <DialogContentContainer>\n              <Combobox stickyCategories options={options} renderOnlyVisibleOptions categories={categories} placeholder="Placeholder text here" maxOptionsWithoutScroll={3} />\n            </DialogContentContainer>\n          </div>\n        </StoryDescription>\n      </Flex>;\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          StoryDescription\n        }\n      }\n    }\n  },\n  name: "With virtualization optimization"\n}',...WithVirtualizationOptimization.parameters?.docs?.source}}},LoadingState.parameters={...LoadingState.parameters,docs:{...LoadingState.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => [], []);\n    return <DialogContentContainer>\n        <Combobox loading options={options} placeholder="Board name" />\n      </DialogContentContainer>;\n  },\n  name: "Loading state"\n}',...LoadingState.parameters?.docs?.source}}},ComboboxAsPersonPicker.parameters={...ComboboxAsPersonPicker.parameters,docs:{...ComboboxAsPersonPicker.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => [{\n      id: "Hadas Farhi",\n      label: "Hadas Farhi",\n      src: person1,\n      type: Avatar.types.IMG,\n      position: "(Frontend Developer)",\n      categoryId: "suggestedPeople"\n    }, {\n      id: "Rotem Dekel",\n      label: "Rotem Dekel",\n      src: person2,\n      type: Avatar.types.IMG,\n      position: "(Product Designer)",\n      categoryId: "suggestedPeople"\n    }, {\n      id: "Netta Muller",\n      label: "Netta Muller",\n      src: person3,\n      type: Avatar.types.IMG,\n      position: "(Brand Designer)",\n      categoryId: "suggestedPeople"\n    }], []);\n    const categories = useMemo(() => ({\n      suggestedPeople: {\n        id: "suggestedPeople",\n        label: "Suggested people"\n      }\n    }), []);\n    return <Flex style={{\n      width: "100%",\n      height: "270px"\n    }} justify={Flex.justify.CENTER} align={Flex.align.START}>\n        <Dialog content={() => <DialogContentContainer className="combobox-stories-styles_wrapper">\n              <Combobox options={options} categories={categories} optionRenderer={optionRenderer} size={Combobox.sizes.SMALL} placeholder="Search" />\n            </DialogContentContainer>} tooltip position={Dialog.positions.BOTTOM} open={true}>\n          <div className="person-picker-mock">\n            <Avatar size={Avatar.sizes.SMALL} src={person1} type={Avatar.types.IMG} />\n          </div>\n        </Dialog>\n      </Flex>;\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          person1,\n          person2,\n          person3,\n          optionRenderer\n        }\n      }\n    }\n  },\n  name: "Combobox as person picker"\n}',...ComboboxAsPersonPicker.parameters?.docs?.source}}};const __namedExportsOrder=["Overview","Default","ComboboxInsideADialog","Sizes","WithCategories","WithIcons","WithOptionRenderer","WithButton","WithCreation","WithVirtualizationOptimization","LoadingState","ComboboxAsPersonPicker"]},"../storybook-blocks/dist/src/components/story-description/story-description.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>p});var jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js"),react=__webpack_require__("../../node_modules/react/index.js"),classnames=__webpack_require__("../../node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),withStaticProps=__webpack_require__("../storybook-blocks/dist/src/types/withStaticProps.js"),FlexConstants=__webpack_require__("../storybook-blocks/dist/src/helpers/components/Flex/FlexConstants.js"),Flex=__webpack_require__("../storybook-blocks/dist/src/helpers/components/Flex/Flex.js"),e_description="story-description-module_description__yFjQO",e_vertical="story-description-module_vertical__C1SJj";const m=t=>{var o,l,n,{description:a="",headerStyle:p,children:u,vertical:v=!1,className:f,align:j,justify:g=(null===(o=m.justify)||void 0===o?void 0:o.START),headerAlign:h,headerJustify:y}=t;const x=(0,react.useMemo)((()=>{var i,s;return v?null===(i=m.directions)||void 0===i?void 0:i.COLUMN:null===(s=m.directions)||void 0===s?void 0:s.ROW}),[v]);return(0,jsx_runtime.jsxs)(Flex.A,{direction:x,gap:null===(l=m.gaps)||void 0===l?void 0:l.MEDIUM,justify:g,align:j||void 0,className:f,children:[(0,jsx_runtime.jsx)(Flex.A,{className:classnames_default()(e_description,{[e_vertical]:v}),style:Object.assign({width:"120px"},p),justify:y,align:h||(null===(n=m.align)||void 0===n?void 0:n.CENTER),children:a}),u]})};var p=(0,withStaticProps.N)(m,{justify:FlexConstants.aP,align:FlexConstants.xB,gaps:FlexConstants.Us,directions:FlexConstants.bo})},"./src/__tests__/interactions-helper.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{S:()=>resetFocus});var _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/@storybook/testing-library/dist/index.mjs");async function resetFocus(){const focusTrap=document.querySelector("[data-testid=focusTrap]");await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.Q4.click(focusTrap)}},"./src/tests/interactions-utils.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Jw:()=>expectActiveElementToHavePartialText,Ld:()=>interactionSuite,NX:()=>getByLabelText,Tf:()=>getByText,Xr:()=>getFirstByClassName,Z8:()=>clearText,cb:()=>delay,gy:()=>getByRole,h5:()=>getByTestId,jp:()=>clickElement,kD:()=>typeMultipleTimes,lI:()=>waitForElementVisible,vZ:()=>pressNavigationKey,wQ:()=>typeText});var _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/@storybook/testing-library/dist/index.mjs"),_testing_library_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/@testing-library/react/dist/@testing-library/react.esm.js"),_constants__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/tests/constants.ts"),_storybook_jest__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../node_modules/@storybook/jest/dist/index.mjs");const testFunctionWrapper=testFunc=>async _ref=>{let{canvasElement,args}=_ref;const canvas=getWithin(canvasElement);return testFunc(canvas,args)},clearText=async element=>{_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.Q4.clear(element)};function logFunctionStart(name){(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_2__.E)(` ➡️ ${name}`).toBeDefined()}function getWithin(canvasOrValidTestElement){if(canvasOrValidTestElement instanceof HTMLElement){const result=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.ux)(canvasOrValidTestElement);if(result instanceof Error)throw result;return result}if(canvasOrValidTestElement.getByRole)return canvasOrValidTestElement}const interactionSuite=_ref3=>{let{beforeEach=null,beforeAll=null,skip=!1,tests,afterEach=null,afterAll=null}=_ref3;return async _ref4=>{let{canvasElement,args}=_ref4;if(!skip){beforeAll&&(logFunctionStart("Before all:"),await testFunctionWrapper(beforeAll)({canvasElement,args}));for(const test of tests){const fnName=test.name;beforeEach&&(logFunctionStart(`Before: ${fnName}`),await testFunctionWrapper(beforeEach)({canvasElement,args})),logFunctionStart(`Running : ${fnName}`),await testFunctionWrapper(test)({canvasElement,args}),afterEach&&(logFunctionStart(`After: ${fnName}`),await testFunctionWrapper(afterEach)({canvasElement,args}))}afterAll&&(logFunctionStart("After all:"),await testFunctionWrapper(afterAll)({canvasElement,args}))}}},getByTestId=(rootElement,dataTestId)=>getWithin(rootElement).getByTestId(dataTestId),getFirstByClassName=className=>document.getElementsByClassName(className)[0],getByRole=function(rootElement,role){let options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return getWithin(rootElement).getByRole(role,options)},getByLabelText=(rootElement,text)=>getWithin(rootElement).getByLabelText(text),getByText=function(rootElement,text){let options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return getWithin(rootElement).getByText(text,options)},clickElement=element=>_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.Q4.click(element),typeText=async function(element,text){let waitForDebounceMs=arguments.length>2&&void 0!==arguments[2]?arguments[2]:250;const promise=_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.Q4.type(element,text,{delay:50}),result=await promise;return await delay(waitForDebounceMs),result},expectActiveElementToHavePartialText=text=>{(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_2__.E)(document.activeElement).toHaveTextContent(text)},pressNavigationKey=async function(){let command=arguments.length>0&&void 0!==arguments[0]?arguments[0]:_constants__WEBPACK_IMPORTED_MODULE_3__.G.TAB,waitForDebounceMs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const promise=command===_constants__WEBPACK_IMPORTED_MODULE_3__.G.TAB?_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.Q4.tab():_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.Q4.keyboard(command),result=await promise;return await delay(waitForDebounceMs),result};function delay(timeout){return new Promise((resolve=>{if(!timeout)return resolve(void 0);setTimeout(resolve,timeout)}))}const waitForElementVisible=getterFunc=>new Promise((resolve=>{let element;(0,_testing_library_react__WEBPACK_IMPORTED_MODULE_1__.fm)((async()=>{element=await getterFunc(),(0,_storybook_jest__WEBPACK_IMPORTED_MODULE_2__.E)(element).toBeVisible()})).then((()=>{resolve(element)}))})),typeMultipleTimes=async function(text,count){let options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{delay:70};text=text.repeat(count),await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.Q4.keyboard(text,options)}},"../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[16].use[1]!../../node_modules/resolve-url-loader/index.js!../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[16].use[3]!./src/components/Combobox/__stories__/Combobox.stories.scss":(module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/css-loader/dist/runtime/sourceMaps.js"),_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__),_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/css-loader/dist/runtime/api.js"),___CSS_LOADER_EXPORT___=__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__)()(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default());___CSS_LOADER_EXPORT___.push([module.id,".combobox-stories-styles_virtualized-description{width:300px}.combobox-stories-styles_category-wrapper{width:300px}.combobox-stories-styles_row{display:flex;flex-direction:row;gap:50px}.combobox-stories-styles_btn-group{display:flex;justify-content:space-between}.combobox-stories-styles_wrapper{width:300px;padding:16px}.combobox-stories-styles_btn{width:100%}.combobox-stories-styles_big-figure figure{height:270px}.person-picker-mock{display:flex;justify-content:center;align-items:center;border:1px solid;border-radius:var(--sb-border-radius-small);padding:var(--sb-spacing-xs);background-color:var(--sb-primary-selected-color);border-color:var(--sb-primary-color);width:97px;height:34px}.person-picker-mock-option{display:flex;align-items:center;justify-content:center}.person-picker-mock-name{padding:0 8px;font-size:13px}.person-picker-mock-name span{color:var(--sb-secondary-text-color);margin-left:4px}","",{version:3,sources:["webpack://./src/components/Combobox/__stories__/Combobox.stories.scss"],names:[],mappings:"AAGE,iDACE,WAAA,CAEF,0CACE,WAAA,CAGF,6BACE,YAAA,CACA,kBAAA,CACA,QAAA,CAGF,mCACE,YAAA,CACA,6BAAA,CAGF,iCACE,WAAA,CACA,YAAA,CAGF,6BACE,UAAA,CAIA,2CACE,YAAA,CAKN,oBACE,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,gBAAA,CACA,2CAAA,CACA,4BAAA,CACA,iDAAA,CACA,oCAAA,CACA,UAAA,CACA,WAAA,CAEA,2BACE,YAAA,CACA,kBAAA,CACA,sBAAA,CAEF,yBACE,aAAA,CACA,cAAA,CAEA,8BACE,oCAAA,CACA,eAAA",sourcesContent:['@import "../../../styles/states";\n\n.combobox-stories-styles {\n  &_virtualized-description {\n    width: 300px\n  }\n  &_category-wrapper {\n    width: 300px;\n  }\n\n  &_row {\n    display: flex;\n    flex-direction: row;\n    gap: 50px;\n  }\n\n  &_btn-group {\n    display: flex;\n    justify-content: space-between;\n  }\n\n  &_wrapper {\n    width: 300px;\n    padding: 16px;\n  }\n\n  &_btn {\n    width: 100%;\n  }\n\n  &_big-figure {\n    figure {\n      height: 270px;\n    }\n  }\n}\n\n.person-picker-mock {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 1px solid;\n  border-radius: var(--sb-border-radius-small);\n  padding: var(--sb-spacing-xs);\n  background-color: var(--sb-primary-selected-color);\n  border-color: var(--sb-primary-color);\n  width: 97px;\n  height: 34px;\n\n  &-option {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  &-name {\n    padding: 0 8px;\n    font-size: 13px;\n\n    span {\n      color: var(--sb-secondary-text-color);\n      margin-left: 4px;\n    }\n  }\n}\n'],sourceRoot:""}]);const __WEBPACK_DEFAULT_EXPORT__=___CSS_LOADER_EXPORT___}}]);